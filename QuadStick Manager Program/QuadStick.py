#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Fri Sep 19 09:07:42 2014
#
# after installing Vocola python runtime libraries (wxpython, etc)...
# pip packages required:

# pip install wxPython
# pip install pyinstall
# pip install pyserial
# pip install pywinusb
# pip install openpyxl
# pip install rfc6266

# to build a release, >pyinstall QuadStick.spec
# exe will be in dist folder

# change log
#
# add anti-dead-zone to external pointers
# add gain to external pointers
# add circular dead-zone to external pointers
# handle x360ce mode to update value grid and cronus max.  
# add path to game files in hover?
# add copied game file message to transcript
# add copy/delete quadstick files over Bluetooth connection
# "manage quadstick over bluetooth or serial connection"
# add confirm prompt to download game file when double clicked
# move all remaining urls over to S3 from googledrive
# split one py file into several smaller ones
# add a message service?
# add voice commands as sheet in config file instead of separate file
# color code company config files vs user
# move back from S3 to google drive for version.ini and firmware
# add language system by DomePlaysHD

import time
from time import sleep

import traceback
import wx
import threading, queue, copy
#from ctypes import *
import urllib.request, urllib.parse, urllib.error
import urllib.request, urllib.error, urllib.parse
import socket
import wx.lib.agw.pygauge as PG
import wx.grid
import wx.adv
import subprocess
import sys

import xlsx2csv
import qsflash
import HIDHide

from qsflash import *
from vocola import *
from microterm import microterm, has_serial_ports
from ViGEmBus import VirtualGamepadEmulator
from QuadStickHID import *
from ultrastik import *
#from trackir import *
from mouse import *
from googledrive import *
from textstrings import *

DEBUG = False
settings = qsflash.settings
preferences = qsflash.preferences
tmp_log_path = None
original_stdout = sys.stdout
original_stderr = sys.stderr
logfile = None

# Global variables for devices
VG = None
QS = None
US1 = None
US2 = None
TIR = None
MOUSE = None
H = None   # HIDHide handler

SERIAL_PORT_SOCKET = None

# global variables

QMP = None

MINIMIZE = False

# begin wxGlade: dependencies
import gettext
import wx.grid
# end wxGlade

# begin wxGlade: extracode
LIP_MIN_MINIMUM = 2
LIP_MIN_MAXIMUM = 98
LIP_MIN_MAX_DIFF = 2
# end wxGlade

MOUSE_CAPTURE_LOW_PASS_FILTER = 100

def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)
    
# Define Text Drop Target class

def create_menu_item(menu, label, func):
    item = wx.MenuItem(menu, -1, label)
    menu.Bind(wx.EVT_MENU, func, id=item.GetId())
    menu.Append(item)
    return item


class CustomTaskBarIcon(wx.adv.TaskBarIcon):
    """"""
    
    #----------------------------------------------------------------------
    def __init__(self, frame):
        """Constructor"""
        wx.adv.TaskBarIcon.__init__(self)
        self.frame = frame
        
        # img = wx.Image("24x24.png", wx.BITMAP_TYPE_ANY)
        # bmp = wx.BitmapFromImage(img)
        # self.icon = wx.EmptyIcon()
        # self.icon.CopyFromBitmap(bmp)
        
        # self.SetIcon(self.icon, "Restore")
        ib = wx.IconBundle()
        ib.AddIcon(resource_path("quadstickx.ico"), wx.BITMAP_TYPE_ANY)
        i = ib.GetIcon(wx.Size(24,24))
        self.SetIcon(i)
        self.Bind(wx.adv.EVT_TASKBAR_LEFT_DOWN, self.OnTaskBarLeftClick)
 
    #----------------------------------------------------------------------
    def OnTaskBarActivate(self, evt):
        """"""
        pass
 
    #----------------------------------------------------------------------
    def OnTaskBarClose(self, evt):
        """
        Destroy the taskbar icon and frame from the taskbar icon itself
        """
        self.frame.Close()
 
    #----------------------------------------------------------------------
    def OnTaskBarLeftClick(self, evt):
        """
        Create the right-click menu
        """
        self.frame.Show()
        self.frame.Restore()
        
    #----------------------------------------------------------------------
    def CreatePopupMenu(self):
        menu = wx.Menu()
        create_menu_item(menu, 'Restore', self.OnTaskBarLeftClick)
        create_menu_item(menu, 'Minimize', self.OnMinimize)
        create_menu_item(menu, 'Maximize', self.OnMaximize)
        menu.AppendSeparator()
        create_menu_item(menu, 'Exit', self.on_exit)
        return menu

    #----------------------------------------------------------------------
    def OnMaximize(self, evt):
        """
        Create the right-click menu
        """
        self.frame.Show()
        self.frame.Maximize()
        
    #----------------------------------------------------------------------
    def OnMinimize(self, evt):
        """
        Create the right-click menu
        """
        self.frame.Show()
        self.frame.Iconize()
        

    def on_exit(self, event):
        self.frame.Close()


class MouseCapture(wx.Dialog):
    def __init__(self, *args, **kwds):
        global settings
        # begin wxGlade: MouseCapture.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((400, 200))
        self.SetTitle(_("Mouse capture"))

        sizer_32 = wx.GridSizer(1, 1, 0, 0)

        self.message = wx.StaticText(self, wx.ID_ANY, _("Mouse capture active.\nPress F10 key to exit."))
        self.message.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "MS Shell Dlg 2"))
        sizer_32.Add(self.message, 0, wx.ALIGN_CENTER, 0)

        self.SetSizer(sizer_32)

        self.Layout()

        self.Bind(wx.EVT_INIT_DIALOG, self.__set_properties, self)
        # end wxGlade
        self.SetTransparent(100)
        self.Bind(wx.EVT_CHAR_HOOK, self.KeyDownEvent, self)
        self.Bind(wx.EVT_MOUSE_EVENTS, self.MouseEvent, self)
        self.message.Bind(wx.EVT_MOUSE_EVENTS, self.MouseEventText, self.message)
        self.message.Bind(wx.EVT_CHAR_HOOK, self.KeyDownEvent, self.message)

        self._timer = wx.Timer(self, wx.ID_ANY)
        self.Bind(wx.EVT_TIMER, self.TimerEvent, self._timer)
        self.Bind(wx.EVT_CLOSE, self.CloseEvent, self)

        # setup mouse event variables
        self._mode = settings['mouse_capture_mode']
        self._center = wx.Point(settings['mouse_center_x'], settings['mouse_center_y'])
        self._width = float(settings['mouse_width'])/2
        self._height = float(settings['mouse_height'])/2 
        self._limit_x = int(self._width * 0.75)
        self._limit_y = int(self._height * 0.75)
        self._gain_x = float(settings['mouse_gain_x'])
        self._gain_y = float(settings['mouse_gain_x'])
        self._delta_x = 0.0
        self._delta_y = 0.0
        self._last_x = 0.0
        self._last_y = 0.0
        self._last_time = time.time()
        self._dxdt = 0
        self._dydt = 0
        self._buttons = (0,0,0,0,0)
        if self._mode == "Motion":
            #"""Hides the cursor."""
            self.SetCursor(wx.Cursor(wx.CURSOR_BLANK))

    def KeyDownEvent(self, event):
        # Look for the F10 character to exit capture mode
        value = event.GetKeyCode()
        #print 'KeyDownEvent ', repr(value)
        if value == 349: #"F10"
            self.Close()
            self.result = False
            print("exit mouse capture")
        event.Skip()

    def MouseEvent(self, event):
        #print "mouse event: ", repr(event)
        #if event.ButtonDown():
            #print "mouse left button clicked", dir(event)
        self._buttons = (event.LeftIsDown(),
                         event.MiddleIsDown(),
                         event.RightIsDown())
        #print "buttons: ", repr(self._buttons)
        self.update_mouse((event.GetPosition() - self._center).Get())
        event.Skip()
        
    def MouseEventText(self, event):
        # the text message in the middle of the screen gets separate events from the rest of the screen
        #print "mouse event: ", repr(event)
        #if event.ButtonDown():
            #print "mouse left button clicked", dir(event)
        #if event.Moving() or event.Dragging():
        self._buttons = (event.LeftIsDown(),
                         event.MiddleIsDown(),
                         event.RightIsDown())
        #print "buttons: ", repr(self._buttons)
        self.update_mouse(((event.GetPosition() + self.message.GetPosition()) - self._center).Get())
        event.Skip()
        
    def update_mouse(self, xy):
        if self._mode == "Motion":
            now = time.time()
            delta_time = now - self._last_time
            # print "delta_time: ", delta_time
            self._last_time = now
            if delta_time <= 0:
                return
            if self._timer.IsRunning():
                self._timer.Stop()
            # WarpPointer(self, x, y)
            self._delta_x = xy[0] - self._last_x
            self._delta_y = xy[1] - self._last_y
            # check if close to the edge of the window
            if abs(xy[0]) > self._limit_x or abs(xy[1]) > self._limit_y:
                # reset the point position to the center
                xy = (0,0)
                self.WarpPointer(int(self._width), int(self._height))
            self._last_x, self._last_y = xy
            # low pass filter
            self._dxdt = ((self._dxdt * MOUSE_CAPTURE_LOW_PASS_FILTER) + (self._delta_x / delta_time)) / (MOUSE_CAPTURE_LOW_PASS_FILTER + 1)
            self._dydt = ((self._dydt * MOUSE_CAPTURE_LOW_PASS_FILTER) + (self._delta_y / delta_time)) / (MOUSE_CAPTURE_LOW_PASS_FILTER + 1)
            xy = (self._dxdt, self._dydt)
            self._timer.Start(50, True) #one shot, not recurring
            
        if MOUSE:
            x = int((xy[0] * self._gain_x) / self._width)
            y = int((xy[1] * self._gain_y) / self._height)
            x = x if x < 100 else 100
            x = x if x > -100 else -100
            y = y if y < 100 else 100
            y = y if y > -100 else -100
            MOUSE.update_location(x, y, self._buttons)
            
    def TimerEvent(self, event):
        # print "timer expired before a movement was detected.  Update mouse."
        self._dxdt = 0.0
        self._dydt = 0.0
        self.update_mouse((self._last_x,self._last_y))
        self._timer.Stop()  # just in case
        #if self._timer.IsRunning(): # kill timer and wait for actual change
            #self._timer.Stop()
        event.Skip()

    def CloseEvent(self, event):
        self.SetCursor(wx.Cursor(wx.CURSOR_ARROW))
        event.Skip()


    def __set_properties(self, event):  # wxGlade: MouseCapture.<event_handler>
        self.SetSize((wx.DisplaySize()[0], wx.DisplaySize()[1]))
        self.SetWindowStyle(wx.STAY_ON_TOP) # go borderless
        self.SetExtraStyle(self.GetExtraStyle() & ~(win32con.WS_EX_DLGMODALFRAME |
           win32con.WS_EX_WINDOWEDGE | win32con.WS_EX_CLIENTEDGE | win32con.WS_EX_STATICEDGE))
        self.SetRect((0,0,wx.DisplaySize()[0], wx.DisplaySize()[1]))
        event.Skip()
# end of class MouseCapture

class TextDropTarget(wx.TextDropTarget):
   """ This object implements Drop Target functionality for Text """
   def __init__(self, obj, disposition=None):
      """ Initialize the Drop Target, passing in the Object Reference to
          indicate what should receive the dropped text """
      # Initialize the wx.TextDropTarget Object
      wx.TextDropTarget.__init__(self)
      # Store the Object Reference for dropped text
      self.obj = obj
      self.disposition = disposition

   def OnDropText(self, x, y, data):
      """ Implement Text Drop """
      # When text is dropped, write it into the object specified
      print(("DROP", x, y, data))
      if self.disposition:
        self.disposition(x, y, data)
      #self.obj.WriteText(data + '\n\n')


class QSGauge(wx.lib.agw.pygauge.PyGauge):
    """ 
    Allow vertical bars
    """
    
    def OnPaint(self, event):
        """
        Handles the ``wx.EVT_PAINT`` event for L{PyGauge}.

        :param `event`: a `wx.PaintEvent` event to be processed.
        """

        dc = wx.BufferedPaintDC(self)
        rect = self.GetClientRect()
        
        dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
        dc.Clear()
        colour = self.GetBackgroundColour()
        dc.SetBrush(wx.Brush(colour))
        dc.SetPen(wx.Pen(colour))
        dc.DrawRectangle(rect)
        
        
        if self._border_colour:
            dc.SetPen(wx.Pen(self.GetBorderColour()))
            dc.DrawRectangle(rect)
            pad = 1 + self.GetBorderPadding()
            rect.Deflate(pad,pad)


        if self.GetBarGradient():
            for i, gradient in enumerate(self._barGradientSorted):
                c1,c2 = gradient
                w = int(rect.width * (float(self._valueSorted[i]) / self._range))
                r = copy.copy(rect)
                r.width = w 
                dc.GradientFillLinear(r, c1, c2, wx.EAST)
        else:       
            for i, colour in enumerate(self._barColourSorted):
                dc.SetBrush(wx.Brush(colour))
                dc.SetPen(wx.Pen(colour))
                r = copy.copy(rect)
                if self.WindowStyle & wx.GA_VERTICAL:
                    h = int(rect.height * (float(self._valueSorted[i]) / self._range))
                    r.height = h
                    r.y = rect.height - h
                else:
                    w = int(rect.width * (float(self._valueSorted[i]) / self._range))
                    r.width = w
                dc.DrawRectangle(r)

class UserGoogleDriveFolder(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.result = None
        # begin wxGlade: UserGoogleDriveFolder.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle(_("Add a User Game Configuration File"))

        sizer_33 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, _("Add a User Game Configuration File")), wx.VERTICAL)

        self.label_9 = wx.StaticText(self, wx.ID_ANY, _("\nThere are three ways to add games to the User's Game Files list:\n\n1) Open the game configuration spreadsheet in your browser and copy \n     the URL from the address bar into the box below.\n\n     The Google Spreadsheet needs to be either Shared Publicly or \n     Published to the Web in the File menu of the spreadsheet. \n\n2) The URL can also be Dragged from the browser directly into the \n     User's Game Files list to bypass this prompt.\n\n3) Invoking the spreadsheet menu: \"QuadStick->Download into QuadStick using QMP\"\n     will share the spreadsheet, add it to this list and copy the configuration into the \n     QuadStick automatically."))
        sizer_33.Add(self.label_9, 3, wx.ALL | wx.EXPAND, 0)

        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(sizer_36, 1, wx.EXPAND, 0)

        self.panel_24 = wx.Panel(self, wx.ID_ANY)
        sizer_36.Add(self.panel_24, 1, wx.EXPAND, 0)

        sizer_37 = wx.BoxSizer(wx.VERTICAL)
        sizer_36.Add(sizer_37, 15, wx.EXPAND, 0)

        self.panel_26 = wx.Panel(self, wx.ID_ANY)
        sizer_37.Add(self.panel_26, 1, wx.EXPAND, 0)

        self.google_drive_url = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_37.Add(self.google_drive_url, 0, wx.EXPAND, 0)

        self.panel_27 = wx.Panel(self, wx.ID_ANY)
        sizer_37.Add(self.panel_27, 1, wx.EXPAND, 0)

        self.panel_25 = wx.Panel(self, wx.ID_ANY)
        sizer_36.Add(self.panel_25, 1, wx.EXPAND, 0)

        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(sizer_34, 1, wx.EXPAND, 0)

        self.panel_16 = wx.Panel(self, wx.ID_ANY)
        sizer_34.Add(self.panel_16, 1, wx.EXPAND, 0)

        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34.Add(sizer_35, 1, wx.EXPAND, 0)

        self.button_5 = wx.Button(self, wx.ID_OK, _("OK"))
        sizer_35.Add(self.button_5, 1, wx.EXPAND, 0)

        self.button_4 = wx.Button(self, wx.ID_CANCEL, _("Cancel"))
        sizer_35.Add(self.button_4, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_33)
        sizer_33.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.UserFolderOKEvent, self.google_drive_url)
        self.Bind(wx.EVT_BUTTON, self.UserFolderOKEvent, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.UserFolderCancelEvent, self.button_4)
        # end wxGlade
        # self.SetWindowStyle(wx.STAY_ON_TOP) # go borderless
        # self.SetExtraStyle(QMP.GetExtraStyle() & ~(win32con.WS_EX_DLGMODALFRAME |
                # win32con.WS_EX_WINDOWEDGE | win32con.WS_EX_CLIENTEDGE | win32con.WS_EX_STATICEDGE))
        # self.SetRect((0,0,wx.DisplaySize()[0], wx.DisplaySize()[1]))


    def UserFolderOKEvent(self, event):  # wxGlade: UserGoogleDriveFolder.<event_handler>
        print("Event handler 'UserFolderOKEvent'")
        self.result = self.google_drive_url.GetValue()
        #self.Close()
        event.Skip()
    def UserFolderCancelEvent(self, event):  # wxGlade: UserGoogleDriveFolder.<event_handler>
        print("Event handler 'UserFolderCancelEvent'")
        self.result = None
        self.Close()
        event.Skip()
# end of class UserGoogleDriveFolder

class FileNotFoundDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FileNotFoundDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((300, 260))
        self.SetTitle(_("File Not Found"))

        sizer_6 = wx.BoxSizer(wx.VERTICAL)

        self.label_5 = wx.StaticText(self, wx.ID_ANY, _("\nError: Unable to read\npreferences file\nfrom QuadStick"), style=wx.ALIGN_CENTER_HORIZONTAL)
        self.label_5.SetMinSize((300, 100))
        self.label_5.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_6.Add(self.label_5, 1, 0, 0)

        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)

        self.button_1 = wx.Button(self, wx.ID_ANY, _("Use Factory\nDefaults"))
        self.button_1.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_7.Add(self.button_1, 1, wx.EXPAND, 0)

        self.button_2 = wx.ToggleButton(self, wx.ID_ANY, _("Exit"))
        self.button_2.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_7.Add(self.button_2, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_6)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.UseFactoryDefaultsEvent, self.button_1)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.ExitEvent, self.button_2)
        # end wxGlade

    def UseFactoryDefaultsEvent(self, event):  # wxGlade: FileNotFoundDialog.<event_handler>
        print("Event handler 'UseFactoryDefaultsEvent'")
        self.Close()
        self.result = True
        event.Skip()

    def ExitEvent(self, event):  # wxGlade: FileNotFoundDialog.<event_handler>
        print("Event handler 'ExitEvent'")
        self.Close()
        self.result = False
        event.Skip()

# end of class FileNotFoundDialog

class UnableToSave(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: UnableToSave.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((400, 300))
        self.SetTitle(_("Unable to save"))

        sizer_21 = wx.BoxSizer(wx.VERTICAL)

        self.label_6 = wx.StaticText(self, wx.ID_ANY, _("\n\nError: Unable to save\npreferences file\nto QuadStick"), style=wx.ALIGN_CENTER_HORIZONTAL)
        self.label_6.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_21.Add(self.label_6, 4, 0, 0)

        self.button_3 = wx.Button(self, wx.ID_CLOSE, _("Close"))
        self.button_3.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_21.Add(self.button_3, 1, 0, 0)

        self.SetSizer(sizer_21)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.UnableToSaveClose, self.button_3)
        # end wxGlade

    def UnableToSaveClose(self, event):  # wxGlade: UnableToSave.<event_handler>
        print("Event handler 'UnableToSaveClose'")
        self.Close()
        event.Skip()

# end of class UnableToSave

class QuadStickPreferences(wx.Frame):
    def __init__(self, *args, **kwds):
        # over write wx.Gauge widget with a modified version of PyGauge from the AGW library
        wx.Gauge = QSGauge
        # begin wxGlade: QuadStickPreferences.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1200, 700))
        self.SetTitle(_("QuadStick"))
        self.SetToolTip(_("Change preference settings for QuadStick"))

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.notebook = wx.Notebook(self, wx.ID_ANY, style=0)
        self.notebook.SetMinSize((-1, 500))
        sizer_2.Add(self.notebook, 4, wx.EXPAND, 0)

        self.notebook_game_files = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook_game_files.SetMinSize((1176, 496))
        self.notebook.AddPage(self.notebook_game_files, _("Game Files"))

        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)

        self.box_quadstick_flash = wx.StaticBox(self.notebook_game_files, wx.ID_ANY, _("In QuadStick"))
        sizer_23 = wx.StaticBoxSizer(self.box_quadstick_flash, wx.VERTICAL)
        sizer_22.Add(sizer_23, 2, wx.EXPAND, 0)

        self.list_box_csv_files = wx.ListCtrl(self.notebook_game_files, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_REPORT)
        self.list_box_csv_files.SetToolTip(_("Double click to Edit"))
        sizer_23.Add(self.list_box_csv_files, 4, wx.EXPAND, 0)

        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23.Add(sizer_31, 1, wx.EXPAND, 0)

        sizer_40 = wx.BoxSizer(wx.VERTICAL)
        sizer_31.Add(sizer_40, 1, wx.EXPAND, 0)

        self.button_load_and_run = wx.Button(self.notebook_game_files, wx.ID_ANY, _("Load and Run File\nin QuadStick"))
        self.button_load_and_run.SetToolTip(_("Requires a USB, Bluetooth or serial connection to the QuadStick"))
        sizer_40.Add(self.button_load_and_run, 1, wx.EXPAND, 0)

        self.print_file_list = wx.Button(self.notebook_game_files, wx.ID_ANY, _("Print file list"))
        self.print_file_list.SetToolTip(_("Opens a browser window with the list of files in the QuadStick"))
        sizer_40.Add(self.print_file_list, 1, wx.EXPAND, 0)

        sizer_63 = wx.BoxSizer(wx.VERTICAL)
        sizer_31.Add(sizer_63, 1, wx.EXPAND, 0)

        self.button_delete_csv = wx.Button(self.notebook_game_files, wx.ID_ANY, _("Remove\nfrom QuadStick"))
        self.button_delete_csv.SetToolTip(_("Remove the game's profile CSV file from the QuadStick"))
        sizer_63.Add(self.button_delete_csv, 1, wx.EXPAND, 0)

        self.panel_18 = wx.Panel(self.notebook_game_files, wx.ID_ANY)
        sizer_63.Add(self.panel_18, 1, wx.EXPAND, 0)

        self.box_factory_profiles = wx.StaticBox(self.notebook_game_files, wx.ID_ANY, _("Quadstick Factory profiles"))
        sizer_3 = wx.StaticBoxSizer(self.box_factory_profiles, wx.VERTICAL)
        sizer_22.Add(sizer_3, 2, wx.EXPAND, 0)

        self.online_game_files_list = wx.ListCtrl(self.notebook_game_files, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_REPORT)
        self.online_game_files_list.SetToolTip(_("Double Click to edit. Drag over to download into to QuadStick flash."))
        sizer_3.Add(self.online_game_files_list, 4, wx.EXPAND, 0)

        sizer_49 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_49, 1, wx.EXPAND, 0)

        self.button_edit_spreadsheet = wx.Button(self.notebook_game_files, wx.ID_ANY, _("Open Configuration Spreadsheet"))
        self.button_edit_spreadsheet.SetToolTip(_("Opens browser on the selected configuration spreadsheet"))
        sizer_49.Add(self.button_edit_spreadsheet, 1, wx.EXPAND, 0)

        self.button_download_csv = wx.Button(self.notebook_game_files, wx.ID_ANY, _("Download to QuadStick"))
        self.button_download_csv.SetToolTip(_("Download a game's custom CSV file into the QuadStick"))
        sizer_49.Add(self.button_download_csv, 1, wx.EXPAND, 0)

        self.custom_profiles_box = wx.StaticBox(self.notebook_game_files, wx.ID_ANY, _("User Custom profiles"))
        sizer_8 = wx.StaticBoxSizer(self.custom_profiles_box, wx.VERTICAL)
        sizer_22.Add(sizer_8, 2, wx.EXPAND, 0)

        self.user_game_files_list = wx.ListCtrl(self.notebook_game_files, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_REPORT)
        self.user_game_files_list.SetToolTip(_("Double Click to Edit.  Drag over to download into to QuadStick flash."))
        sizer_8.Add(self.user_game_files_list, 4, wx.EXPAND, 0)

        sizer_48 = wx.BoxSizer(wx.VERTICAL)
        sizer_8.Add(sizer_48, 1, wx.EXPAND, 0)

        self.button_add_user_game = wx.Button(self.notebook_game_files, wx.ID_ANY, _("Add Game to User List"))
        self.button_add_user_game.SetToolTip(_("Click button and paste URL for a custom configuration spreadsheet into the dialog box"))
        sizer_48.Add(self.button_add_user_game, 1, wx.EXPAND, 0)

        self.button_remove_user_game = wx.Button(self.notebook_game_files, wx.ID_ANY, _("Remove Game from User List"))
        self.button_remove_user_game.SetToolTip(_("Removes the selected User Custom game from the list."))
        sizer_48.Add(self.button_remove_user_game, 1, wx.EXPAND, 0)

        sizer_48.Add((0, 0), 0, 0, 0)

        self.notebook_joystick = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_joystick, _("Joystick"))

        grid_sizer_1 = wx.GridSizer(3, 4, 2, 2)

        self.label_joystick_info = wx.StaticText(self.notebook_joystick, wx.ID_ANY, _("Sets Joystick physical range of motion.\n\nLarger numbers make the \njoystick less sensitive.\n\nClick Save preferences \nafter making adjustments."), (100, -1), (220, 140))
        grid_sizer_1.Add(self.label_joystick_info, 0, wx.ALIGN_CENTER, 0)

        self.slider_UP = wx.Slider(self.notebook_joystick, wx.ID_ANY, 18, 10, 50, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_UP.SetToolTip(_("Joystick UP movement"))
        grid_sizer_1.Add(self.slider_UP, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.SHAPED, 0)

        self.panel_2 = wx.Panel(self.notebook_joystick, wx.ID_ANY)
        grid_sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)

        self.radio_box_slider_linking = wx.RadioBox(self.notebook_joystick, wx.ID_ANY, _("Link Sliders:"), choices=[_("all"), _("horizontal"), _("vertical"), _("none")], majorDimension=4, style=wx.RA_SPECIFY_ROWS)
        self.radio_box_slider_linking.SetSelection(0)
        grid_sizer_1.Add(self.radio_box_slider_linking, 0, wx.EXPAND, 0)

        self.slider_LEFT = wx.Slider(self.notebook_joystick, wx.ID_ANY, 25, 10, 50, style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_INVERSE | wx.SL_LABELS)
        self.slider_LEFT.SetToolTip(_("Joystick LEFT movement"))
        grid_sizer_1.Add(self.slider_LEFT, 0, wx.ALIGN_CENTER_VERTICAL | wx.SHAPED, 0)

        self.slider_NEUTRAL = wx.Slider(self.notebook_joystick, wx.ID_ANY, 10, 0, 20, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_NEUTRAL.SetToolTip(_("Center dead zone.  Set high enough to prevent wandering mouse or joystick."))
        grid_sizer_1.Add(self.slider_NEUTRAL, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.SHAPED, 0)

        self.slider_RIGHT = wx.Slider(self.notebook_joystick, wx.ID_ANY, 25, 10, 50, style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_LABELS)
        self.slider_RIGHT.SetToolTip(_("Joystick RIGHT movement"))
        grid_sizer_1.Add(self.slider_RIGHT, 0, wx.ALIGN_CENTER_VERTICAL | wx.SHAPED, 0)

        self.panel_4 = wx.Panel(self.notebook_joystick, wx.ID_ANY)
        grid_sizer_1.Add(self.panel_4, 1, wx.EXPAND, 0)

        self.panel_5 = wx.Panel(self.notebook_joystick, wx.ID_ANY)
        grid_sizer_1.Add(self.panel_5, 1, wx.EXPAND, 0)

        self.slider_DOWN = wx.Slider(self.notebook_joystick, wx.ID_ANY, 19, 10, 50, style=wx.SL_AUTOTICKS | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_DOWN.SetToolTip(_("Joystick DOWN movement"))
        grid_sizer_1.Add(self.slider_DOWN, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.SHAPED, 0)

        self.panel_6 = wx.Panel(self.notebook_joystick, wx.ID_ANY)
        grid_sizer_1.Add(self.panel_6, 1, wx.EXPAND, 0)

        self.box_joystick_preference = wx.StaticBox(self.notebook_joystick, wx.ID_ANY, _("Calculated joystick preference values:"))
        sizer_54 = wx.StaticBoxSizer(self.box_joystick_preference, wx.HORIZONTAL)
        grid_sizer_1.Add(sizer_54, 1, wx.ALL | wx.EXPAND, 1)

        self.joystick_preference_grid = wx.grid.Grid(self.notebook_joystick, wx.ID_ANY, size=(1, 1))
        self.joystick_preference_grid.CreateGrid(6, 2)
        self.joystick_preference_grid.SetRowLabelSize(4)
        self.joystick_preference_grid.EnableEditing(0)
        self.joystick_preference_grid.SetColLabelValue(0, _("Preference"))
        self.joystick_preference_grid.SetColLabelValue(1, _("Value"))
        self.joystick_preference_grid.SetToolTip(_("Preferences File values"))
        sizer_54.Add(self.joystick_preference_grid, 1, wx.ALL | wx.EXPAND, 0)

        self.notebook_misc = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_misc, _("Misc"))

        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_12_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_12_copy_1, 1, wx.EXPAND, 0)

        self.box_mouse_speed = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Mouse speed:"))
        sizer_6 = wx.StaticBoxSizer(self.box_mouse_speed, wx.HORIZONTAL)
        sizer_12_copy_1.Add(sizer_6, 1, wx.EXPAND, 0)

        self.panel_13_copy_1 = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_6.Add(self.panel_13_copy_1, 1, wx.EXPAND, 0)

        self.slider_mouse_speed = wx.Slider(self.notebook_misc, wx.ID_ANY, 100, 0, 250, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_mouse_speed.SetToolTip(_("Mouse speed relative to joystick movement"))
        sizer_6.Add(self.slider_mouse_speed, 2, wx.EXPAND, 0)

        self.box_SP_max = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Sip/Puff Max pressure"))
        sizer_7 = wx.StaticBoxSizer(self.box_SP_max, wx.HORIZONTAL)
        sizer_12_copy_1.Add(sizer_7, 1, wx.EXPAND, 0)

        self.panel_9_copy = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_7.Add(self.panel_9_copy, 1, wx.EXPAND, 0)

        self.slider_SP_max = wx.Slider(self.notebook_misc, wx.ID_ANY, 70, 10, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_SP_max.SetToolTip(_("Maximum pressure to scale to 100% signal"))
        sizer_7.Add(self.slider_SP_max, 2, wx.EXPAND, 0)

        sizer_12_copy_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_12_copy_2, 1, wx.EXPAND, 0)

        self.box_brightness = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Brightness"))
        sizer_21 = wx.StaticBoxSizer(self.box_brightness, wx.HORIZONTAL)
        sizer_12_copy_2.Add(sizer_21, 1, wx.EXPAND, 0)

        self.panel_13_copy_2 = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_21.Add(self.panel_13_copy_2, 1, wx.EXPAND, 0)

        self.slider_brightness = wx.Slider(self.notebook_misc, wx.ID_ANY, 75, 0, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_brightness.SetToolTip(_("LED brightness"))
        sizer_21.Add(self.slider_brightness, 2, wx.EXPAND, 0)

        self.box_SP_high = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Sip/Puff High threshold"))
        sizer_32 = wx.StaticBoxSizer(self.box_SP_high, wx.HORIZONTAL)
        sizer_12_copy_2.Add(sizer_32, 1, wx.EXPAND, 0)

        self.panel_9 = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_32.Add(self.panel_9, 1, wx.EXPAND, 0)

        self.slider_SP_high = wx.Slider(self.notebook_misc, wx.ID_ANY, 40, 10, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_SP_high.SetToolTip(_("Pressure at which to trigger output"))
        sizer_32.Add(self.slider_SP_high, 2, wx.EXPAND, 0)

        sizer_12_copy_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_12_copy_3, 1, wx.EXPAND, 0)

        self.box_volume = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Volume"))
        sizer_33 = wx.StaticBoxSizer(self.box_volume, wx.HORIZONTAL)
        sizer_12_copy_3.Add(sizer_33, 1, wx.EXPAND, 0)

        self.panel_13_copy_3 = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_33.Add(self.panel_13_copy_3, 1, wx.EXPAND, 0)

        self.slider_volume = wx.Slider(self.notebook_misc, wx.ID_ANY, 40, 0, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_volume.SetToolTip(_("Speaker volume"))
        sizer_33.Add(self.slider_volume, 2, wx.EXPAND, 0)

        self.box_SP_low = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Sip/Puff Low threshold"))
        sizer_34 = wx.StaticBoxSizer(self.box_SP_low, wx.HORIZONTAL)
        sizer_12_copy_3.Add(sizer_34, 1, wx.EXPAND, 0)

        self.panel_10 = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_34.Add(self.panel_10, 1, wx.EXPAND, 0)

        self.slider_SP_low = wx.Slider(self.notebook_misc, wx.ID_ANY, 8, 5, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_SP_low.SetToolTip(_("Low pressure threshold."))
        sizer_34.Add(self.slider_SP_low, 2, wx.ALL | wx.EXPAND, 1)

        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_35, 1, wx.EXPAND, 0)

        self.box_D_Pad_outer_ring = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("D-Pad outer ring"))
        sizer_37 = wx.StaticBoxSizer(self.box_D_Pad_outer_ring, wx.HORIZONTAL)
        sizer_35.Add(sizer_37, 1, wx.EXPAND, 0)

        self.panel_13 = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_37.Add(self.panel_13, 1, wx.EXPAND, 0)

        self.slider_D_Pad_outer_ring = wx.Slider(self.notebook_misc, wx.ID_ANY, 40, 10, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_D_Pad_outer_ring.SetToolTip(_("Percent joystick deflection to active D-Pad"))
        sizer_37.Add(self.slider_D_Pad_outer_ring, 2, wx.EXPAND, 0)

        self.box_Lip_max = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Lip maximum"))
        sizer_56 = wx.StaticBoxSizer(self.box_Lip_max, wx.HORIZONTAL)
        sizer_35.Add(sizer_56, 1, wx.EXPAND, 0)

        self.panel_13_copy = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_56.Add(self.panel_13_copy, 1, wx.EXPAND, 0)

        self.slider_Lip_max = wx.Slider(self.notebook_misc, wx.ID_ANY, 35, 5, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_Lip_max.SetToolTip(_("Percent of lip sensor physical movement to exert full signal"))
        sizer_56.Add(self.slider_Lip_max, 2, wx.EXPAND, 0)

        sizer_36 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_36, 1, wx.EXPAND, 0)

        self.box_D_Pad_inner_ring = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("D-Pad inner ring"))
        sizer_55 = wx.StaticBoxSizer(self.box_D_Pad_inner_ring, wx.HORIZONTAL)
        sizer_36.Add(sizer_55, 1, wx.EXPAND, 0)

        self.panel_14 = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_55.Add(self.panel_14, 1, wx.EXPAND, 0)

        self.slider_D_Pad_inner_ring = wx.Slider(self.notebook_misc, wx.ID_ANY, 20, 10, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_D_Pad_inner_ring.SetToolTip(_("Percent joystick deflection to active inner D-Pad after delay"))
        sizer_55.Add(self.slider_D_Pad_inner_ring, 2, wx.EXPAND, 0)

        self.box_Lip_min = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Lip minimum"))
        sizer_64 = wx.StaticBoxSizer(self.box_Lip_min, wx.HORIZONTAL)
        sizer_36.Add(sizer_64, 1, wx.EXPAND, 0)

        self.panel_14_copy = wx.Panel(self.notebook_misc, wx.ID_ANY)
        sizer_64.Add(self.panel_14_copy, 1, wx.EXPAND, 0)

        self.slider_Lip_min = wx.Slider(self.notebook_misc, wx.ID_ANY, 8, 5, 100, style=wx.SL_AUTOTICKS | wx.SL_INVERSE | wx.SL_LABELS | wx.SL_VERTICAL)
        self.slider_Lip_min.SetToolTip(_("Percent lip sensor position to activate signal"))
        sizer_64.Add(self.slider_Lip_min, 2, wx.EXPAND, 0)

        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_17, 3, wx.EXPAND, 0)

        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17.Add(sizer_18, 1, wx.EXPAND, 0)

        self.box_do = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Digital Outputs"))
        sizer_19 = wx.StaticBoxSizer(self.box_do, wx.VERTICAL)
        sizer_18.Add(sizer_19, 1, wx.EXPAND, 0)

        self.checkbox_do_1 = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Digital output 1"))
        self.checkbox_do_1.SetToolTip(_("Controls default Digital Output 1 on/off state"))
        sizer_19.Add(self.checkbox_do_1, 0, 0, 0)

        self.checkbox_do_2 = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Digital output 2"))
        self.checkbox_do_2.SetToolTip(_("Controls default Digital Output 2 on/off state"))
        sizer_19.Add(self.checkbox_do_2, 0, 0, 0)

        self.box_mouse = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Mouse"))
        sizer_65 = wx.StaticBoxSizer(self.box_mouse, wx.VERTICAL)
        sizer_18.Add(sizer_65, 1, wx.EXPAND, 0)

        self.checkbox_circular_deadzone = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable Circular Dead Zone"))
        self.checkbox_circular_deadzone.SetToolTip(_("Select Circular or Square Dead Zone for Joystick"))
        self.checkbox_circular_deadzone.SetValue(1)
        sizer_65.Add(self.checkbox_circular_deadzone, 0, 0, 0)

        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_65.Add(sizer_38, 0, wx.EXPAND, 0)

        self.label_mouse_response = wx.StaticText(self.notebook_misc, wx.ID_ANY, _("Mouse Response Curve: "))
        self.label_mouse_response.SetToolTip(_("Selects how the joystick position is converted to mouse movement"))
        sizer_38.Add(self.label_mouse_response, 0, 0, 0)

        self.choice_mouse_response = wx.Choice(self.notebook_misc, wx.ID_ANY, choices=[_("Linear"), _("Mixed"), _("Parabolic")])
        self.choice_mouse_response.SetSelection(0)
        sizer_38.Add(self.choice_mouse_response, 0, 0, 0)

        self.box_BT = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Bluetooth:"))
        sizer_20 = wx.StaticBoxSizer(self.box_BT, wx.HORIZONTAL)
        sizer_17.Add(sizer_20, 1, wx.EXPAND, 0)

        grid_sizer_3 = wx.FlexGridSizer(2, 2, 1, 5)
        sizer_20.Add(grid_sizer_3, 2, wx.EXPAND, 0)

        self.label_device = wx.StaticText(self.notebook_misc, wx.ID_ANY, _("Device:"), style=wx.ALIGN_RIGHT)
        grid_sizer_3.Add(self.label_device, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.choice_BT_device_mode = wx.Choice(self.notebook_misc, wx.ID_ANY, choices=[_("none"), _("keyboard"), _("game_pad"), _("mouse"), _("combo"), _("joystick"), _("ssp")])
        self.choice_BT_device_mode.SetToolTip(_("Device mode.  Controls what kind of device QuadStick is for Bluetooth function"))
        self.choice_BT_device_mode.SetSelection(0)
        grid_sizer_3.Add(self.choice_BT_device_mode, 0, wx.EXPAND, 0)

        self.label_auth = wx.StaticText(self.notebook_misc, wx.ID_ANY, _("Auth:"), style=wx.ALIGN_RIGHT)
        grid_sizer_3.Add(self.label_auth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.choice_BT_auth_mode = wx.Choice(self.notebook_misc, wx.ID_ANY, choices=[_("0"), _("1"), _("2"), _("4")])
        self.choice_BT_auth_mode.SetToolTip(_("Authentication mode.  Default: 4"))
        self.choice_BT_auth_mode.SetSelection(3)
        grid_sizer_3.Add(self.choice_BT_auth_mode, 0, wx.EXPAND, 0)

        self.checkbox_enable_serial_port = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable file management over serial port"))
        self.checkbox_enable_serial_port.SetToolTip(_("Allows external pointer and file commands over Bluetooth or serial port when QuadStick is not plugged in to the PC"))
        sizer_20.Add(self.checkbox_enable_serial_port, 2, 0, 0)

        self.box_SP_misc = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Sip/Puff misc"))
        sizer_67 = wx.StaticBoxSizer(self.box_SP_misc, wx.VERTICAL)
        sizer_17.Add(sizer_67, 1, wx.EXPAND, 0)

        self.checkbox_select_files = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable select file with side tube"))
        self.checkbox_select_files.SetToolTip(_("Enables Select File for Long Sip on Right side tube "))
        self.checkbox_select_files.SetValue(1)
        sizer_67.Add(self.checkbox_select_files, 0, 0, 0)

        self.checkbox_swap = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable swap inputs with side tube"))
        self.checkbox_swap.SetToolTip(_("Enables Swap Lip input with Long Puff on Right side tube"))
        sizer_67.Add(self.checkbox_swap, 0, 0, 0)

        grid_sizer_2 = wx.GridSizer(2, 2, 1, 4)
        sizer_67.Add(grid_sizer_2, 1, 0, 0)

        self.label_SP_low_delay = wx.StaticText(self.notebook_misc, wx.ID_ANY, _("Low threshold delay:"))
        grid_sizer_2.Add(self.label_SP_low_delay, 1, wx.ALIGN_LEFT, 10)

        self.spin_ctrl_SP_low_delay = wx.SpinCtrl(self.notebook_misc, wx.ID_ANY, "1200", min=100, max=3000, style=0)
        self.spin_ctrl_SP_low_delay.SetToolTip(_("Low (or Soft) Sip/Puff signals are sensed after a short delay"))
        grid_sizer_2.Add(self.spin_ctrl_SP_low_delay, 1, wx.ALIGN_CENTER, 0)

        self.label_SP_high_delay = wx.StaticText(self.notebook_misc, wx.ID_ANY, _("High threshold delay:"))
        grid_sizer_2.Add(self.label_SP_high_delay, 1, wx.ALIGN_LEFT, 10)

        self.spin_ctrl_SP_high_delay = wx.SpinCtrl(self.notebook_misc, wx.ID_ANY, "2000", min=1000, max=3000, style=0)
        self.spin_ctrl_SP_high_delay.SetToolTip(_("Long high threshold Sip/Puffs can "))
        grid_sizer_2.Add(self.spin_ctrl_SP_high_delay, 1, wx.ALIGN_CENTER, 0)

        self.box_usb_settings = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("USB settings"))
        sizer_66 = wx.StaticBoxSizer(self.box_usb_settings, wx.VERTICAL)
        sizer_17.Add(sizer_66, 1, wx.EXPAND, 0)

        self.checkbox_ps4_boot_mode = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable boot in PS4 USB mode"))
        self.checkbox_ps4_boot_mode.SetToolTip(_("Controls the USB emulation when the QuadStick powers up.  Required if using the PS4 console or if using Touchpad or motion controls with the virtual DS4 emulation"))
        sizer_66.Add(self.checkbox_ps4_boot_mode, 0, 0, 0)

        self.checkbox_Titan2 = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Titan Two PS4 flag"))
        self.checkbox_Titan2.SetToolTip(_("Disables Playstation authentication responses.  The Titan 2 passes PS4 authentication requests and responses must be disabled to avoid interruptions."))
        sizer_66.Add(self.checkbox_Titan2, 0, 0, 0)

        self.checkbox_enable_usb_comm = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable Voice Commands over USB"))
        self.checkbox_enable_usb_comm.SetToolTip(_("Allows voice commands over USB instead of Bluetooth or Serial cable"))
        sizer_66.Add(self.checkbox_enable_usb_comm, 0, 0, 0)

        self.checkbox_usb_A_host_mode = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable USB-A Host mode"))
        self.checkbox_usb_A_host_mode.SetToolTip(_("Must be on to support DS4, UltraStik, or other devices connected to the USB-A port."))
        sizer_66.Add(self.checkbox_usb_A_host_mode, 0, 0, 0)

        self.box_vg = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("Virtual gamepad emulator"))
        sizer_68 = wx.StaticBoxSizer(self.box_vg, wx.VERTICAL)
        sizer_17.Add(sizer_68, 1, wx.EXPAND, 0)

        self.checkbox_enable_vg_X360 = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable virtual XBox controller emulation"))
        self.checkbox_enable_vg_X360.SetToolTip(_("Enables the ViGEmBus XBox virtual controller.  Allows playing PC games that use the XBox controller, or XBox Remote Play"))
        sizer_68.Add(self.checkbox_enable_vg_X360, 0, 0, 0)

        self.checkbox_enable_vg_DS4 = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable virtual Dualshock 4 emulation"))
        self.checkbox_enable_vg_DS4.SetToolTip(_("Enables the ViGEmBus DS4 virtual controller.  Allows playing PC games that use the DS4 controller, or Playstation Remote Play"))
        sizer_68.Add(self.checkbox_enable_vg_DS4, 0, 0, 0)

        self.checkbox__enable_HIDHide = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Enable HIDHide to hide Quadstick from games"))
        self.checkbox__enable_HIDHide.SetToolTip(_("When using an XBox or DS4 virtual controller, this setting prevents games and other programs from detecting the presence of the Quadstick's controller interface if they detect activity from older Direct Input controllers."))
        sizer_68.Add(self.checkbox__enable_HIDHide, 0, 0, 0)

        self.box_qmp_settings = wx.StaticBox(self.notebook_misc, wx.ID_ANY, _("QMP settings"))
        sizer_1 = wx.StaticBoxSizer(self.box_qmp_settings, wx.VERTICAL)
        sizer_17.Add(sizer_1, 1, wx.EXPAND, 0)
        
        grid_sizer_locale = wx.FlexGridSizer(1, 2, 1, 5)
        sizer_1.Add(grid_sizer_locale, 2, wx.EXPAND, 0)
        
        self.label_locale = wx.StaticText(self.notebook_misc, wx.ID_ANY, _("Language:"), style=wx.ALIGN_RIGHT)
        grid_sizer_locale.Add(self.label_locale, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.choice_locale = wx.Choice(self.notebook_misc, wx.ID_ANY, choices=[_("English"), _("German")])
        self.choice_locale.SetToolTip(_("Change the Language of the QMP Program."))
        self.choice_locale.SetSelection(0)
        grid_sizer_locale.Add(self.choice_locale, 0, wx.EXPAND, 0)

        self.checkbox_minimize_to_tray = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Minimize to tray"))
        self.checkbox_minimize_to_tray.SetToolTip(_("QMP will minimze to the task bar tray when checked"))
        sizer_1.Add(self.checkbox_minimize_to_tray, 0, 0, 0)

        self.checkbox_start_minimized = wx.CheckBox(self.notebook_misc, wx.ID_ANY, _("Start QMP minimized"))
        self.checkbox_start_minimized.SetToolTip(_("Start QMP minimized."))
        sizer_1.Add(self.checkbox_start_minimized, 0, 0, 0)

        self.notebook_firmware = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_firmware, _("Firmware"))

        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        sizer_26.Add(sizer_28, 1, wx.EXPAND, 0)

        self.box_current_firmware = wx.StaticBox(self.notebook_firmware, wx.ID_ANY, _("Current Firmware"))
        sizer_29 = wx.StaticBoxSizer(self.box_current_firmware, wx.VERTICAL)
        sizer_28.Add(sizer_29, 2, wx.EXPAND, 0)

        self.label_new_version = wx.StaticText(self.notebook_firmware, wx.ID_ANY, _("\nEach time a new version of the QuadStick \nfirmware is built, a build number is \nassigned to identify that version"), style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_29.Add(self.label_new_version, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.box_build_number = wx.StaticBox(self.notebook_firmware, wx.ID_ANY, _("Build number:"))
        sizer_30 = wx.StaticBoxSizer(self.box_build_number, wx.HORIZONTAL)
        sizer_29.Add(sizer_30, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.build_number_text = wx.TextCtrl(self.notebook_firmware, wx.ID_ANY, "000", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.build_number_text.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_30.Add(self.build_number_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.label_firmware_update = wx.StaticText(self.notebook_firmware, wx.ID_ANY, _("\n\nDuring the update process, this program \nwill attempt to backup and restore the \ngame CSV files on the QuadStick."), style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_29.Add(self.label_firmware_update, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.panel_1 = wx.Panel(self.notebook_firmware, wx.ID_ANY)
        sizer_28.Add(self.panel_1, 1, wx.EXPAND, 0)

        self.box_available_firmware = wx.StaticBox(self.notebook_firmware, wx.ID_ANY, _("Available firmware"))
        sizer_27 = wx.StaticBoxSizer(self.box_available_firmware, wx.VERTICAL)
        sizer_26.Add(sizer_27, 1, wx.EXPAND, 0)

        self.list_ctrl_firmware = wx.ListCtrl(self.notebook_firmware, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_REPORT)
        sizer_27.Add(self.list_ctrl_firmware, 5, wx.EXPAND, 0)

        self.download_selected_build = wx.Button(self.notebook_firmware, wx.ID_ANY, _("Download selected Firmware\nto QuadStick"))
        sizer_27.Add(self.download_selected_build, 1, 0, 0)

        self.notebook_pane_transcript = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_pane_transcript, _("Voice Control"))

        self.voice_cmd_transcript_box = wx.StaticBox(self.notebook_pane_transcript, wx.ID_ANY, _("Voice Command Transcript"))
        sizer_4 = wx.StaticBoxSizer(self.voice_cmd_transcript_box, wx.HORIZONTAL)

        self.voice_transcript = wx.TextCtrl(self.notebook_pane_transcript, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_PROCESS_ENTER | wx.TE_WORDWRAP)
        self.voice_transcript.SetFocus()
        sizer_4.Add(self.voice_transcript, 3, wx.EXPAND, 0)

        self.word_list = wx.TextCtrl(self.notebook_pane_transcript, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.word_list.SetToolTip(_("Currently active voice commands"))
        sizer_4.Add(self.word_list, 3, wx.EXPAND, 0)

        self.grid_1 = wx.grid.Grid(self.notebook_pane_transcript, wx.ID_ANY, size=(1, 1))
        self.grid_1.CreateGrid(16, 3)
        self.grid_1.SetRowLabelSize(0)
        self.grid_1.EnableEditing(0)
        self.grid_1.EnableDragRowSize(0)
        self.grid_1.EnableDragGridSize(0)
        self.grid_1.SetColLabelValue(0, _("________________"))
        self.grid_1.SetColLabelValue(1, _("________________"))
        self.grid_1.SetColLabelValue(2, _("________________"))
        self.grid_1.SetFont(wx.Font(10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_4.Add(self.grid_1, 0, wx.EXPAND, 0)

        self.notebook_voice_files = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_voice_files, _("Voice Files"))

        sizer_22_copy = wx.BoxSizer(wx.HORIZONTAL)

        self.box_voice_files = wx.StaticBox(self.notebook_voice_files, wx.ID_ANY, _("In Vocola folder"))
        sizer_23_copy = wx.StaticBoxSizer(self.box_voice_files, wx.VERTICAL)
        sizer_22_copy.Add(sizer_23_copy, 1, wx.EXPAND, 0)

        self.list_box_voice_files = wx.ListBox(self.notebook_voice_files, wx.ID_ANY, choices=[], style=wx.LB_EXTENDED)
        sizer_23_copy.Add(self.list_box_voice_files, 4, wx.EXPAND, 0)

        sizer_51 = wx.BoxSizer(wx.VERTICAL)
        sizer_23_copy.Add(sizer_51, 1, wx.EXPAND, 0)

        self.button_edit_voice_file = wx.Button(self.notebook_voice_files, wx.ID_ANY, _("Edit Voice File"))
        sizer_51.Add(self.button_edit_voice_file, 1, wx.EXPAND, 0)

        self.button_delete_voice_file = wx.Button(self.notebook_voice_files, wx.ID_ANY, _("Delete game file from folder"))
        self.button_delete_voice_file.SetToolTip(_("Removes a game's VCH file from Vocola folder and adjusts VCL scripts to match"))
        sizer_51.Add(self.button_delete_voice_file, 1, wx.EXPAND, 0)

        self.box_voice_cmd_files = wx.StaticBox(self.notebook_voice_files, wx.ID_ANY, _("Vocola - Voice Command Language Files"))
        sizer_24_copy = wx.StaticBoxSizer(self.box_voice_cmd_files, wx.VERTICAL)
        sizer_22_copy.Add(sizer_24_copy, 2, wx.EXPAND, 0)

        self.online_voice_files_list = wx.ListCtrl(self.notebook_voice_files, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_REPORT)
        sizer_24_copy.Add(self.online_voice_files_list, 4, wx.EXPAND, 0)

        sizer_25_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24_copy.Add(sizer_25_copy, 1, wx.EXPAND, 0)

        self.button_download_voice_file = wx.Button(self.notebook_voice_files, wx.ID_ANY, _("Download to Vocola folder"))
        self.button_download_voice_file.SetToolTip(_("Download game VCH file from Quadstick.com and included it in voice commands"))
        sizer_25_copy.Add(self.button_download_voice_file, 1, wx.EXPAND, 0)

        self.panel_7 = wx.Panel(self.notebook_voice_files, wx.ID_ANY)
        sizer_25_copy.Add(self.panel_7, 1, wx.EXPAND, 0)

        self.notebook_external_pointers = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_external_pointers, _("External Pointers"))

        sizer_39 = wx.BoxSizer(wx.VERTICAL)

        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39.Add(sizer_41, 0, wx.EXPAND, 0)

        sizer_42 = wx.BoxSizer(wx.VERTICAL)
        sizer_41.Add(sizer_42, 1, wx.EXPAND, 0)

        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42.Add(sizer_43, 5, wx.EXPAND, 0)

        self.panel_39 = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_43.Add(self.panel_39, 5, wx.EXPAND, 0)

        self.TIR_LeftUp = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100, style=wx.GA_VERTICAL)
        self.TIR_LeftUp.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.TIR_LeftUp.SetBarColour(wx.Colour(0, 255, 0))
        sizer_43.Add(self.TIR_LeftUp, 1, wx.EXPAND, 0)

        self.panel_40 = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_43.Add(self.panel_40, 5, wx.EXPAND, 0)

        sizer_44 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42.Add(sizer_44, 1, wx.EXPAND, 0)

        self.TIR_LeftLeft = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100)
        self.TIR_LeftLeft.SetBackgroundColour(wx.Colour(0, 255, 0))
        self.TIR_LeftLeft.SetBarColour(wx.Colour(0, 0, 0))
        sizer_44.Add(self.TIR_LeftLeft, 5, wx.EXPAND, 0)

        self.panel_41 = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        self.panel_41.SetBackgroundColour(wx.Colour(0, 255, 0))
        sizer_44.Add(self.panel_41, 1, wx.EXPAND, 0)

        self.TIR_LeftRight = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100)
        self.TIR_LeftRight.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.TIR_LeftRight.SetBarColour(wx.Colour(0, 255, 0))
        sizer_44.Add(self.TIR_LeftRight, 5, wx.EXPAND, 0)

        sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42.Add(sizer_45, 5, wx.EXPAND, 0)

        self.panel_42 = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_45.Add(self.panel_42, 5, wx.EXPAND, 0)

        self.TIR_LeftDown = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100, style=wx.GA_VERTICAL)
        self.TIR_LeftDown.SetBackgroundColour(wx.Colour(0, 255, 0))
        self.TIR_LeftDown.SetBarColour(wx.Colour(0, 0, 0))
        sizer_45.Add(self.TIR_LeftDown, 1, wx.EXPAND, 0)

        self.panel_43 = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_45.Add(self.panel_43, 5, wx.EXPAND, 0)

        sizer_42_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_41.Add(sizer_42_copy, 1, wx.EXPAND, 0)

        sizer_43_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42_copy.Add(sizer_43_copy, 5, wx.EXPAND, 0)

        self.panel_39_copy = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_43_copy.Add(self.panel_39_copy, 5, wx.EXPAND, 0)

        self.TIR_RightUp = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100, style=wx.GA_VERTICAL)
        self.TIR_RightUp.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.TIR_RightUp.SetBarColour(wx.Colour(0, 255, 0))
        sizer_43_copy.Add(self.TIR_RightUp, 1, wx.EXPAND, 0)

        self.panel_40_copy = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_43_copy.Add(self.panel_40_copy, 5, wx.EXPAND, 0)

        sizer_44_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42_copy.Add(sizer_44_copy, 1, wx.EXPAND, 0)

        self.TIR_RightLeft = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100)
        self.TIR_RightLeft.SetBackgroundColour(wx.Colour(0, 255, 0))
        self.TIR_RightLeft.SetBarColour(wx.Colour(0, 0, 0))
        sizer_44_copy.Add(self.TIR_RightLeft, 5, wx.EXPAND, 0)

        self.panel_41_copy = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        self.panel_41_copy.SetBackgroundColour(wx.Colour(0, 255, 0))
        sizer_44_copy.Add(self.panel_41_copy, 1, wx.EXPAND, 0)

        self.TIR_RightRight = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100)
        self.TIR_RightRight.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.TIR_RightRight.SetBarColour(wx.Colour(0, 255, 0))
        sizer_44_copy.Add(self.TIR_RightRight, 5, wx.EXPAND, 0)

        sizer_45_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42_copy.Add(sizer_45_copy, 5, wx.EXPAND, 0)

        self.panel_42_copy = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_45_copy.Add(self.panel_42_copy, 5, wx.EXPAND, 0)

        self.TIR_RightDown = wx.Gauge(self.notebook_external_pointers, wx.ID_ANY, 100, style=wx.GA_VERTICAL)
        self.TIR_RightDown.SetBackgroundColour(wx.Colour(0, 255, 0))
        self.TIR_RightDown.SetBarColour(wx.Colour(0, 0, 0))
        sizer_45_copy.Add(self.TIR_RightDown, 1, wx.EXPAND, 0)

        self.panel_43_copy = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_45_copy.Add(self.panel_43_copy, 5, wx.EXPAND, 0)

        self.box_external_pointers_settings = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Settings:"))
        sizer_46 = wx.StaticBoxSizer(self.box_external_pointers_settings, wx.VERTICAL)
        sizer_41.Add(sizer_46, 1, 0, 0)

        self.box_external_pointers_dead_zone = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("External Pointer Center Dead Zone:"))
        sizer_47 = wx.StaticBoxSizer(self.box_external_pointers_dead_zone, wx.VERTICAL)
        sizer_46.Add(sizer_47, 0, wx.EXPAND, 0)

        self.TIR_DeadZone = wx.SpinCtrl(self.notebook_external_pointers, wx.ID_ANY, "", min=0, max=100, style=0)
        self.TIR_DeadZone.SetToolTip(_("Size of no signal area in center for UltraStik or TrackIR"))
        sizer_47.Add(self.TIR_DeadZone, 1, 0, 0)

        self.box_mouse_capture_settings = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Mouse Capture Settings:"))
        mouse_capture_settings = wx.StaticBoxSizer(self.box_mouse_capture_settings, wx.VERTICAL)
        sizer_46.Add(mouse_capture_settings, 2, wx.EXPAND, 0)

        self.capture_mode = wx.Choice(self.notebook_external_pointers, wx.ID_ANY, choices=[_("Off"), _("Position"), _("Motion")])
        self.capture_mode.SetToolTip(_("Absolute position is for Project IRIS FPS Interactor.  Motion is for regular mouse or trackball."))
        self.capture_mode.SetSelection(0)
        mouse_capture_settings.Add(self.capture_mode, 1, wx.ALL, 0)

        position_settings = wx.GridSizer(2, 2, 0, 0)
        mouse_capture_settings.Add(position_settings, 4, wx.EXPAND, 0)

        self.box_mouse_capture_center_x = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Center X:"))
        sizer_58 = wx.StaticBoxSizer(self.box_mouse_capture_center_x, wx.HORIZONTAL)
        position_settings.Add(sizer_58, 1, wx.EXPAND, 0)

        self.center_x = wx.SpinCtrl(self.notebook_external_pointers, wx.ID_ANY, "", min=0, max=10000, style=0)
        self.center_x.SetToolTip(_("Set center X to aiming point of Project IRIS FPS Interactor"))
        sizer_58.Add(self.center_x, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.box_mouse_capture_center_y = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Center Y:"))
        sizer_57 = wx.StaticBoxSizer(self.box_mouse_capture_center_y, wx.HORIZONTAL)
        position_settings.Add(sizer_57, 1, wx.EXPAND, 0)

        self.center_y = wx.SpinCtrl(self.notebook_external_pointers, wx.ID_ANY, "", min=0, max=10000, style=0)
        self.center_y.SetToolTip(_("Set center Y to aiming point of Project IRIS FPS Interactor"))
        sizer_57.Add(self.center_y, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.box_mouse_capture_width = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Width:"))
        sizer_59 = wx.StaticBoxSizer(self.box_mouse_capture_width, wx.HORIZONTAL)
        position_settings.Add(sizer_59, 1, wx.EXPAND, 0)

        self.position_width = wx.SpinCtrl(self.notebook_external_pointers, wx.ID_ANY, "", min=0, max=10000, style=0)
        self.position_width.SetToolTip(_("Set to width of Project IRIS FPS Interactor"))
        sizer_59.Add(self.position_width, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.box_mouse_capture_height = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Height:"))
        sizer_60 = wx.StaticBoxSizer(self.box_mouse_capture_height, wx.HORIZONTAL)
        position_settings.Add(sizer_60, 1, wx.EXPAND, 0)

        self.position_height = wx.SpinCtrl(self.notebook_external_pointers, wx.ID_ANY, "", min=0, max=10000, style=0)
        self.position_height.SetToolTip(_("Set to height of Project IRIS FPS Interactor"))
        sizer_60.Add(self.position_height, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        movement_settings = wx.GridSizer(1, 2, 0, 0)
        mouse_capture_settings.Add(movement_settings, 2, wx.EXPAND, 0)

        self.box_mouse_capture_gain_x = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Gain X:"))
        sizer_61 = wx.StaticBoxSizer(self.box_mouse_capture_gain_x, wx.HORIZONTAL)
        movement_settings.Add(sizer_61, 1, wx.EXPAND, 0)

        self.gain_x = wx.SpinCtrl(self.notebook_external_pointers, wx.ID_ANY, "", min=0, max=1000, style=0)
        self.gain_x.SetToolTip(_("Controls sensitiviy X of mouse. Default is 100%."))
        sizer_61.Add(self.gain_x, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.box_mouse_capture_gain_y = wx.StaticBox(self.notebook_external_pointers, wx.ID_ANY, _("Gain Y:"))
        sizer_62 = wx.StaticBoxSizer(self.box_mouse_capture_gain_y, wx.HORIZONTAL)
        movement_settings.Add(sizer_62, 1, wx.EXPAND, 0)

        self.gain_y = wx.SpinCtrl(self.notebook_external_pointers, wx.ID_ANY, "", min=0, max=1000, style=0)
        self.gain_y.SetToolTip(_("Controls sensitiviy Y of mouse. Default is 100%."))
        sizer_62.Add(self.gain_y, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.StartMouseCapture = wx.Button(self.notebook_external_pointers, wx.ID_ANY, _("Capture Mouse Location\nPress F10 to turn on and off"))
        self.StartMouseCapture.SetToolTip(_("Opens a full screen window to capture mouse and relays info to the QuadStick"))
        mouse_capture_settings.Add(self.StartMouseCapture, 2, wx.EXPAND, 0)

        self.panel_17 = wx.Panel(self.notebook_external_pointers, wx.ID_ANY)
        sizer_39.Add(self.panel_17, 0, wx.EXPAND, 0)

        message_pane_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(message_pane_sizer, 1, wx.ALL | wx.EXPAND, 0)

        self.message_pane_panel = wx.Panel(self, wx.ID_ANY)
        self.message_pane_panel.SetMinSize((-1, 200))
        message_pane_sizer.Add(self.message_pane_panel, 6, wx.EXPAND, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)

        self.text_ctrl_messages = wx.TextCtrl(self.message_pane_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)
        sizer_5.Add(self.text_ctrl_messages, 5, wx.EXPAND, 0)

        self.button_save = wx.Button(self, wx.ID_ANY, _("Save\nPreferences\nto\nQuadStick"))
        message_pane_sizer.Add(self.button_save, 1, wx.EXPAND, 0)

        self.button_cancel = wx.Button(self, wx.ID_CLOSE, _("Close"))
        message_pane_sizer.Add(self.button_cancel, 1, wx.EXPAND, 0)

        self.button_reload = wx.Button(self, wx.ID_ANY, _("Reload\nPreferences\nfrom\nQuadStick"))
        message_pane_sizer.Add(self.button_reload, 1, wx.EXPAND, 0)

        self.message_pane_panel.SetSizer(sizer_5)

        self.notebook_external_pointers.SetSizer(sizer_39)

        self.notebook_voice_files.SetSizer(sizer_22_copy)

        self.notebook_pane_transcript.SetSizer(sizer_4)

        self.notebook_firmware.SetSizer(sizer_26)

        self.notebook_misc.SetSizer(sizer_16)

        self.notebook_joystick.SetSizer(grid_sizer_1)

        self.notebook_game_files.SetSizer(sizer_22)

        self.SetSizer(sizer_2)

        self.Layout()

        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.NotebookPageChangedEvent, self.notebook)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditSpreadsheet, self.list_box_csv_files)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.list_box_csv_files_selected, self.list_box_csv_files)
        self.Bind(wx.EVT_BUTTON, self.LoadAndRunEvent, self.button_load_and_run)
        self.Bind(wx.EVT_BUTTON, self.PrintFileListEvent, self.print_file_list)
        self.Bind(wx.EVT_BUTTON, self.DeleteFromQuadStickEvent, self.button_delete_csv)
        self.Bind(wx.EVT_LIST_BEGIN_DRAG, self.BeginDragFactoryGame, self.online_game_files_list)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditSpreadsheet, self.online_game_files_list)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.GameListSelected, self.online_game_files_list)
        self.Bind(wx.EVT_BUTTON, self.OnEditSpreadsheet, self.button_edit_spreadsheet)
        self.Bind(wx.EVT_BUTTON, self.DownloadToQuadStickEvent, self.button_download_csv)
        self.Bind(wx.EVT_LIST_BEGIN_DRAG, self.BeginDragGame, self.user_game_files_list)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditSpreadsheet, self.user_game_files_list)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.ContextMenuUserGames, self.user_game_files_list)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.GameListSelected, self.user_game_files_list)
        self.Bind(wx.EVT_BUTTON, self.UserGamesAdd, self.button_add_user_game)
        self.Bind(wx.EVT_BUTTON, self.UserGamesRemove, self.button_remove_user_game)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_UP_event, self.slider_UP)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_LEFT_event, self.slider_LEFT)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_NEUTRAL_event, self.slider_NEUTRAL)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_RIGHT_event, self.slider_RIGHT)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_DOWN_event, self.slider_DOWN)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_SP_max_event, self.slider_SP_max)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_SP_high_event, self.slider_SP_high)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_SP_low_event, self.slider_SP_low)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_D_Pad_outer_ring_event, self.slider_D_Pad_outer_ring)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_Lip_max_event, self.slider_Lip_max)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_D_Pad_inner_ring_event, self.slider_D_Pad_inner_ring)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.slider_Lip_min_event, self.slider_Lip_min)
        self.Bind(wx.EVT_CHECKBOX, self.EnableSerialPortEvent, self.checkbox_enable_serial_port)
        self.Bind(wx.EVT_CHECKBOX, self.PS4BootModeEvent, self.checkbox_ps4_boot_mode)
        self.Bind(wx.EVT_CHECKBOX, self.T2PS4Event, self.checkbox_Titan2)
        self.Bind(wx.EVT_CHECKBOX, self.EnableUsbCommEvent, self.checkbox_enable_usb_comm)
        self.Bind(wx.EVT_CHECKBOX, self.vgXBoxEvent, self.checkbox_enable_vg_X360)
        self.Bind(wx.EVT_CHECKBOX, self.vgDS4Event, self.checkbox_enable_vg_DS4)
        self.Bind(wx.EVT_CHECKBOX, self.ToggleHIDHideStatus, self.checkbox__enable_HIDHide)
        self.Bind(wx.EVT_BUTTON, self.DownloadFirmwareEvent, self.download_selected_build)
        self.Bind(wx.EVT_TEXT_ENTER, self.onMessagePaneEnter, self.voice_transcript)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.DeleteFromVocolaEvent, self.list_box_voice_files)
        self.Bind(wx.EVT_BUTTON, self.OnEditVoiceFile, self.button_edit_voice_file)
        self.Bind(wx.EVT_BUTTON, self.DeleteFromVocolaEvent, self.button_delete_voice_file)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.DownloadVoiceFileEvent, self.online_voice_files_list)
        self.Bind(wx.EVT_BUTTON, self.DownloadToVocolaEvent, self.button_download_voice_file)
        self.Bind(wx.EVT_SPINCTRL, self.TIR_DeadZoneEvent, self.TIR_DeadZone)
        self.Bind(wx.EVT_CHOICE, self.MouseCaptureModeEvent, self.capture_mode)
        self.Bind(wx.EVT_SPINCTRL, self.MouseCenterXEvent, self.center_x)
        self.Bind(wx.EVT_SPINCTRL, self.MouseCenterYEvent, self.center_y)
        self.Bind(wx.EVT_SPINCTRL, self.MouseWidthEvent, self.position_width)
        self.Bind(wx.EVT_SPINCTRL, self.MouseHeightEvent, self.position_height)
        self.Bind(wx.EVT_SPINCTRL, self.MouseGainXEvent, self.gain_x)
        self.Bind(wx.EVT_SPINCTRL, self.MouseGainYEvent, self.gain_y)
        self.Bind(wx.EVT_BUTTON, self.StartMouseCaptureEvent, self.StartMouseCapture)
        self.Bind(wx.EVT_BUTTON, self.SavePreferences, self.button_save)
        self.Bind(wx.EVT_BUTTON, self.CancelAndClose, self.button_cancel)
        self.Bind(wx.EVT_BUTTON, self.ReloadFromQuadstick, self.button_reload)
        self.Bind(wx.EVT_CHOICE, self.ChangeLocale, self.choice_locale)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.CloseEvent, self)
        self.tbIcon = CustomTaskBarIcon(self)
        self.Bind(wx.EVT_ICONIZE, self.onMinimize, self)
        self.voice_transcript.Bind(wx.EVT_KEY_DOWN, self.KeyDownEvent, self.voice_transcript)
        self.voice_transcript.Bind(wx.EVT_KEY_UP, self.KeyUpEvent, self.voice_transcript)
        self.Bind(wx.EVT_CHAR_HOOK, self.KeyDownEvent2, self)
        self.Bind(wx.EVT_KEY_DOWN, self.KeyDownEvent2, self)
        self.Bind(wx.EVT_KEY_UP, self.KeyDownEvent2, self)
        self.Bind(wx.EVT_CHAR_HOOK, self.KeyDownEvent2, self.text_ctrl_messages)
        # set up drag and drop for user file list
        dropTarget = TextDropTarget(self.user_game_files_list, self.user_game_files_dropped)
        self.user_game_files_list.SetDropTarget(dropTarget)
        # set up drag and drop for csv file list
        dropTarget = TextDropTarget(self.list_box_csv_files, self.csv_files_dropped)
        self.list_box_csv_files.SetDropTarget(dropTarget)
        # factory vs user game list, last active list
        self._last_game_list_selected = None # self.online_game_files_list
        # self.on_timer()

    def on_timer(self):  # grabs the mouse location and relays it to the quadstick
        dx, dy = wx.GetDisplaySize()
        #print "display size: ", dx, dy
        center_point = (dx/2, dy/2)
        xy = wx.GetMousePosition()
        #print "mouse: ", mouse - center_point
        try:
            if MOUSE:
                MOUSE.update_location(xy)
        except Exception as e:
            print(repr(e))
            
        wx.CallLater(20, self.on_timer)
        
    def CallAfter(self, target, *args, **kwds):
        wx.CallAfter(target, *args, **kwds)
        
    def _update_linked_joystick_slider(self, slider, all, vertical, horizontal):
        new_value = min((max((slider.GetValue(), self.slider_NEUTRAL.GetValue() + 5,)), 100,))
        if not hasattr(slider,'_qs_value'):
            slider._qs_value = new_value
        diff = new_value - slider._qs_value
        slider._qs_value = new_value
        if new_value != slider.GetValue():
            slider.SetValue(new_value)
        if diff == 0: return
        links = self.radio_box_slider_linking.GetStringSelection()
        if links == _('all'):
            for s in all:
                s._qs_value = min((max((s.GetValue() + diff, self.slider_NEUTRAL.GetValue() + 5,)), 100,))
                s.SetValue(s._qs_value)
        if links == _('vertical'):
            for s in vertical:
                s._qs_value = min((max((s.GetValue() + diff, self.slider_NEUTRAL.GetValue() + 5,)), 100,))
                s.SetValue(s._qs_value)
        if links == _('horizontal'):
            for s in horizontal:
                s._qs_value = min((max((s.GetValue() + diff, self.slider_NEUTRAL.GetValue() + 5,)), 100,))
                s.SetValue(s._qs_value)
    
    def slider_UP_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_UP_event'")
        self._update_linked_joystick_slider(self.slider_UP,
            [self.slider_LEFT, self.slider_RIGHT, self.slider_DOWN],
            [self.slider_DOWN,],
            [])
        self.update_joystick_preference_grid()
        event.Skip()

    def SetLinkSlidersMode(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'SetLinkSlidersMode' not implemented!")
        event.Skip()

    def slider_LEFT_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_LEFT_event'")
        self._update_linked_joystick_slider(self.slider_LEFT,
            [self.slider_RIGHT, self.slider_UP, self.slider_DOWN],
            [],
            [self.slider_RIGHT,])
        self.update_joystick_preference_grid()
        event.Skip()

    def slider_NEUTRAL_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_NEUTRAL_event'")
        new_value = self.slider_NEUTRAL.GetValue()
        if not hasattr(self.slider_NEUTRAL,'_qs_value'):
            self.slider_NEUTRAL._qs_value = new_value
        diff = new_value - self.slider_NEUTRAL._qs_value
        self.slider_NEUTRAL._qs_value = new_value
        if diff == 0: return
        for s in [self.slider_LEFT, self.slider_RIGHT, self.slider_UP, self.slider_DOWN]:
            if s.GetValue() < new_value + 5:
                s._qs_value = new_value + 5
                s.SetValue(s._qs_value)
        self.update_joystick_preference_grid()
        event.Skip()

    def slider_RIGHT_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_RIGHT_event'")
        self._update_linked_joystick_slider(self.slider_RIGHT,
            [self.slider_LEFT, self.slider_UP, self.slider_DOWN],
            [],
            [self.slider_LEFT,])
        self.update_joystick_preference_grid()
        event.Skip()

    def slider_DOWN_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_DOWN_event'")
        self._update_linked_joystick_slider(self.slider_DOWN,
            [self.slider_LEFT, self.slider_UP, self.slider_RIGHT],
            [self.slider_UP,],
            [])
        self.update_joystick_preference_grid()
        event.Skip()

    def slider_D_Pad_outer_ring_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_D_Pad_outer_ring_event'")
        v = self.slider_D_Pad_outer_ring.GetValue()
        if v < 3:
            v = 3
            self.slider_D_Pad_outer_ring.SetValue(v)
        if v < self.slider_D_Pad_inner_ring.GetValue() + 2:
            self.slider_D_Pad_inner_ring.SetValue(v - 2)
        event.Skip()

    def slider_D_Pad_inner_ring_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_D_Pad_inner_ring_event'")
        v = self.slider_D_Pad_inner_ring.GetValue()
        if v > 98:
            v = 98
            self.slider_D_Pad_inner_ring.SetValue(v)
        if v > self.slider_D_Pad_outer_ring.GetValue() - 2:
            self.slider_D_Pad_outer_ring.SetValue(v + 2)
        event.Skip()

    def slider_SP_max_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_SP_max_event'")
        v = self.slider_SP_max.GetValue()
        if v < 5:
            v = 5
            self.slider_SP_max.SetValue(v)
        if v < self.slider_SP_high.GetValue() + 2:
            self.slider_SP_high.SetValue(v - 2)
        if self.slider_SP_high.GetValue() < self.slider_SP_low.GetValue() + 2:
            self.slider_SP_low.SetValue(self.slider_SP_high.GetValue() - 2)
        event.Skip()

    def slider_SP_high_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_SP_high_event'")
        v = self.slider_SP_high.GetValue()
        if v < 3:
            v = 3
            self.slider_SP_high.SetValue(v)
        if v > 95:
            v = 95
            self.slider_SP_high.SetValue(v)
        if v + 2 > self.slider_SP_max.GetValue():
            self.slider_SP_max.SetValue(v + 2)
        if v - 2 < self.slider_SP_low.GetValue():
            self.slider_SP_low.SetValue(v - 2)
        event.Skip()

    def slider_SP_low_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_SP_low_event'")
        v = self.slider_SP_low.GetValue()
        if v < 1:
            v = 1
            self.slider_SP_low.SetValue(v)
        if v > 93:
            v = 93
            self.slider_SP_low.SetValue(v)
        if v + 5 > self.slider_SP_max.GetValue():
            self.slider_SP_max.SetValue(v + 5)
        if v + 2 > self.slider_SP_high.GetValue():
            self.slider_SP_high.SetValue(v + 2)
        event.Skip()

    def slider_Lip_max_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_Lip_max_event' ")
        max_v = self.slider_Lip_max.GetValue()
        if max_v < LIP_MIN_MINIMUM + LIP_MIN_MAX_DIFF: #2+2
            max_v = LIP_MIN_MINIMUM + LIP_MIN_MAX_DIFF
            self.slider_Lip_max.SetValue(max_v)
        min_v = self.slider_Lip_min.GetValue()
        if min_v + LIP_MIN_MAX_DIFF > max_v:
            self.slider_Lip_min.SetValue(max_v - LIP_MIN_MAX_DIFF)
        event.Skip()

    def slider_Lip_min_event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'slider_Lip_min_event'")
        min_v = self.slider_Lip_min.GetValue()
        if min_v < LIP_MIN_MINIMUM: #2
            min_v = LIP_MIN_MINIMUM
            self.slider_Lip_min.SetValue(min_v)
        if min_v > LIP_MIN_MAXIMUM: #98
            min_v = LIP_MIN_MAXIMUM
            self.slider_Lip_min.SetValue(min_v)
        max_v = self.slider_Lip_max.GetValue()
        if min_v + LIP_MIN_MAX_DIFF > max_v:
            self.slider_Lip_max.SetValue(min_v + LIP_MIN_MAX_DIFF)
        event.Skip()

    def calculate_joystick_preferences(self):
        up = self.slider_UP.GetValue()
        down = self.slider_DOWN.GetValue()
        left = self.slider_LEFT.GetValue()
        right = self.slider_RIGHT.GetValue()
        max_joy = max([up,down,left,right])
        preferences['joystick_deflection_maximum']  = str(int(max_joy))
        preferences['deflection_multiplier_up']     = str(int(max_joy * 100 / up))
        preferences['deflection_multiplier_down']   = str(int(max_joy * 100 / down))
        preferences['deflection_multiplier_left']   = str(int(max_joy * 100 / left))
        preferences['deflection_multiplier_right']  = str(int(max_joy * 100 / right))
        preferences['joystick_deflection_minimum']  = str(int(self.slider_NEUTRAL.GetValue()))
    
    def update_joystick_preference_grid(self):
        self.calculate_joystick_preferences()
        self.joystick_preference_grid.SetCellValue(0, 0, 'joystick_deflection_maximum')
        self.joystick_preference_grid.SetCellValue(1, 0, 'joystick_deflection_minimum')
        self.joystick_preference_grid.SetCellValue(2, 0, 'deflection_multiplier_up')
        self.joystick_preference_grid.SetCellValue(3, 0, 'deflection_multiplier_down')
        self.joystick_preference_grid.SetCellValue(4, 0, 'deflection_multiplier_left')
        self.joystick_preference_grid.SetCellValue(5, 0, 'deflection_multiplier_right')
        self.joystick_preference_grid.SetCellValue(0, 1, str(preferences['joystick_deflection_maximum']))
        self.joystick_preference_grid.SetCellValue(1, 1, str(preferences['joystick_deflection_minimum']))
        self.joystick_preference_grid.SetCellValue(2, 1, str(preferences['deflection_multiplier_up']))
        self.joystick_preference_grid.SetCellValue(3, 1, str(preferences['deflection_multiplier_down']))
        self.joystick_preference_grid.SetCellValue(4, 1, str(preferences['deflection_multiplier_left']))
        self.joystick_preference_grid.SetCellValue(5, 1, str(preferences['deflection_multiplier_right']))
        self.joystick_preference_grid.AutoSize()

    def SavePreferences(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'SavePreferences'")
        # update dictionary values
        self.calculate_joystick_preferences()
        # set up sliders for D_Pad
        preferences['joystick_D_Pad_outer']         = str(self.slider_D_Pad_outer_ring.GetValue())
        preferences['joystick_D_Pad_inner']         = str(self.slider_D_Pad_inner_ring.GetValue())
        # set up sliders and spinners for Sip/Puff
        preferences['sip_puff_threshold_soft']      = str(self.slider_SP_low.GetValue())
        preferences['sip_puff_threshold']           = str(self.slider_SP_high.GetValue())
        preferences['sip_puff_maximum']             = str(self.slider_SP_max.GetValue())
        preferences['sip_puff_delay_soft']          = str(self.spin_ctrl_SP_low_delay.GetValue())
        preferences['sip_puff_delay_hard']          = str(self.spin_ctrl_SP_high_delay.GetValue())
        # set up sliders for Lip
        preferences['lip_position_maximum']         = str(self.slider_Lip_max.GetValue())
        preferences['lip_position_minimum']         = str(self.slider_Lip_min.GetValue())
        # set up mouse, volume and brightness
        preferences['mouse_speed']                  = str(self.slider_mouse_speed.GetValue())
        preferences['brightness']                   = str(self.slider_brightness.GetValue())
        preferences['volume']                       = str(self.slider_volume.GetValue())
        # set up digital outputs
        preferences['digital_out_1']                = '1' if self.checkbox_do_1.GetValue() else '0'
        preferences['digital_out_2']                = '1' if self.checkbox_do_2.GetValue() else '0'
        # set up bluetooth
        preferences['bluetooth_device_mode']        = self.choice_BT_device_mode.GetStringSelection()
        preferences['bluetooth_authentication_mode']= self.choice_BT_auth_mode.GetStringSelection()
        preferences['bluetooth_connection_mode']    = 'pair'
        preferences['bluetooth_remote_address']     = ''
        # set up misc
        preferences['enable_select_files']          = '1' if self.checkbox_select_files.GetValue() else '0'
        preferences['enable_swap_inputs']           = '1' if self.checkbox_swap.GetValue() else '0'
        preferences['joystick_dead_zone_shape']     = '1' if self.checkbox_circular_deadzone.GetValue() else '0'
        preferences['enable_auto_zero']             = '0'
        preferences['mouse_response_curve']         = str(['Linear','Mixed','Parabolic'].index(self.choice_mouse_response.GetStringSelection()))
        preferences['enable_usb_comm']     = '1' if self.checkbox_enable_usb_comm.GetValue() else '0'
        preferences['enable_usb_a_host']   = '1' if self.checkbox_usb_A_host_mode.GetValue() else '0'

        print(repr(preferences))

        if save_preferences_file(preferences) is None:
            dialog = UnableToSave(self, wx.ID_ANY, "")
            dialog.ShowModal()
            dialog.Destroy()
            self.text_ctrl_messages.AppendText("Failed to save preferences\r\n")
   
        else: # update status box
            self.text_ctrl_messages.AppendText("Preferences saved OK\r\n")
        event.Skip()
        telemetry_log('saveprefs&' + urllib.parse.urlencode(preferences))


    def CancelAndClose(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'CancelAndClose'")
        try:
            if TIR:
                TIR.close()
                TIR = None
                print('TrackIR listener stopped')
            if US1:
                US1.close()
                US1 = None
                print('UltraStick device 1 closed')
            if US2:
                US2.close()
                US2 = None
                print('UltraStick device 2 closed')
            if QS:
                QS.close()
                QS = None
                print('QuadStick device closed')
        except:
            pass
        self.Close()
        event.Skip()

    def ReloadFromQuadstick(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'ReloadFromQuadstick'")
        if load_preferences_file(self) is not None:  # try both flash and ssp access to prefs files
            # update status box
            self.text_ctrl_messages.AppendText("Loaded preferences OK\n")
            settings["preferences"] = preferences
            self.updateControls()
        event.Skip()

    def load_initial_values(self): #FGD
        global settings
        global preferences
        self.text_ctrl_messages.AppendText("Version: " + VERSION + "\r\n")
        vocola_installed = os.path.isdir(VocolaPath)
        if not vocola_installed:
            self.notebook_voice_files.Disable()
        #print "global settings: ", repr(settings)
        # initialize preferences with the last ones saved before
        # then try to read them from the quadstick
        prefs = settings.get("preferences")
        #print "previous preferences: ", repr(prefs)
        if prefs:
            preferences.clear()
            preferences.update(prefs)
        d = find_quadstick_drive(True)
        if d is None: # quadstick not plugged into pc
            self.text_ctrl_messages.AppendText("QuadStick flash drive not found.\n")
            #self.button_reload.Disable()
        else:
            self.text_ctrl_messages.AppendText("QuadStick drive letter: " + d[:2] + "\n")
        if load_preferences_file(self) is not None:  # try both flash and ssp access to prefs files
            # update status box
            self.text_ctrl_messages.AppendText("Loaded preferences OK\n")
            # send telemetry for QMP settings
            settings['preferences'] = preferences
        else: 
            # disable any tabs that need the quadstick
            self.text_ctrl_messages.AppendText("Using previously saved preference values\n")
        if d is None:
            self.download_selected_build.Disable()

        try:
            scratch = settings.copy()
            prefs = scratch.pop("preferences", None)
            if prefs:
                telemetry_log('loadprefs&' + urllib.parse.urlencode(prefs))
            scratch.pop("games", None)
            ugp = scratch.pop("user_game_profiles", None)  # a list of user game profiles
            if ugp:
                ugp = {i:ugp[i] for i in range(0, len(ugp))}  # convert to simple dict
                telemetry_log('user_game_profiles&' + urllib.parse.urlencode(ugp))
            scratch.pop("voices", None)
            scratch.pop("builds", None)
            scratch['drive'] = d  
            telemetry_log('settings&' + urllib.parse.urlencode(scratch))
        except Exception as e:
            print ("initial values telemetry error", repr(e))
            print (traceback.format_exc())

        # make sure mouse capture settings have initial default values
        settings['mouse_capture_mode'] = settings.get('mouse_capture_mode', "Off").strip()
        display_width = wx.DisplaySize()[0]
        display_height = wx.DisplaySize()[1]
        settings['mouse_center_x'] = int(settings.get('mouse_center_x', display_width/2))
        settings['mouse_center_y'] = int(settings.get('mouse_center_y', display_height/2))
        settings['mouse_width']    = int(settings.get('mouse_width', display_width))
        settings['mouse_height']   = int(settings.get('mouse_height', display_height))
        settings['mouse_gain_x']   = int(settings.get('mouse_gain_x', 100))
        settings['mouse_gain_x']   = int(settings.get('mouse_gain_x', 100))

        # mouse capture settings
        choices = self.capture_mode.GetItems()
        choice_index = choices.index(settings['mouse_capture_mode'])
        self.capture_mode.Select(choice_index)
        self.center_x.SetValue(settings['mouse_center_x'])
        self.center_y.SetValue(settings['mouse_center_y'])
        self.position_width.SetValue(settings['mouse_width'])
        self.position_height.SetValue(settings['mouse_height'])
        self.gain_x.SetValue(settings['mouse_gain_x'])
        self.gain_y.SetValue(settings['mouse_gain_x'])
        # clear and force update of quadstick factory game and voice files
        self._game_profiles = [] #settings.get('game_profiles', [])
        self._voice_files = [] #settings.get('voice_files', [])
        self._read_online_files_flag = True # tells widget to read files the first time program runs the Notebook page with the csv file list
        self._csv_files = []
        print("update controls")
        self.updateControls()
        print("controls updated")
        return True

    def updateControls(self):
        self.button_delete_csv.Disable()
        self.button_load_and_run.Disable()
        self.button_remove_user_game.Disable()

        # set up sliders for joystick
        joystick_deflection_minimum = int(preferences.get('joystick_deflection_minimum', defaults['joystick_deflection_minimum']))
        joystick_deflection_maximum = int(preferences.get('joystick_deflection_maximum', defaults['joystick_deflection_maximum']))
        deflection_multiplier_up    = int(preferences.get('deflection_multiplier_up', defaults['deflection_multiplier_up']))
        deflection_multiplier_down  = int(preferences.get('deflection_multiplier_down', defaults['deflection_multiplier_down']))
        deflection_multiplier_left  = int(preferences.get('deflection_multiplier_left', defaults['deflection_multiplier_left']))
        deflection_multiplier_right = int(preferences.get('deflection_multiplier_right', defaults['deflection_multiplier_right']))
        self.slider_NEUTRAL.SetValue(joystick_deflection_minimum)
        self.slider_UP.SetValue(int((joystick_deflection_maximum * 100) / deflection_multiplier_up))
        self.slider_DOWN.SetValue(int((joystick_deflection_maximum * 100) / deflection_multiplier_down))
        self.slider_LEFT.SetValue(int((joystick_deflection_maximum * 100) / deflection_multiplier_left))
        self.slider_RIGHT.SetValue(int((joystick_deflection_maximum * 100) / deflection_multiplier_right))
        self.update_joystick_preference_grid()
        # set up sliders for D_Pad
        self.slider_D_Pad_outer_ring.SetValue(int(preferences.get('joystick_D_Pad_outer', defaults['joystick_D_Pad_outer'])))
        self.slider_D_Pad_inner_ring.SetValue(int(preferences.get('joystick_D_Pad_inner', defaults['joystick_D_Pad_inner'])))
        # set up sliders and spinners for Sip/Puff
        self.slider_SP_low.SetValue(int(preferences.get('sip_puff_threshold_soft', defaults['sip_puff_threshold_soft'])))
        self.slider_SP_high.SetValue(int(preferences.get('sip_puff_threshold', defaults['sip_puff_threshold'])))
        self.slider_SP_max.SetValue(int(preferences.get('sip_puff_maximum', defaults['sip_puff_maximum'])))
        self.spin_ctrl_SP_low_delay.SetValue(int(preferences.get('sip_puff_delay_soft', defaults['sip_puff_delay_soft'])))
        self.spin_ctrl_SP_high_delay.SetValue(int(preferences.get('sip_puff_delay_hard', defaults['sip_puff_delay_hard'])))
        
        # set up sliders for Lip
        self.slider_Lip_max.SetValue(int(preferences.get('lip_position_maximum', defaults['lip_position_maximum'])))
        self.slider_Lip_min.SetValue(int(preferences.get('lip_position_minimum', defaults['lip_position_minimum'])))
        # set up mouse, volume and brightness
        self.slider_mouse_speed.SetValue(int(preferences.get('mouse_speed', defaults['mouse_speed'])))
        self.slider_brightness.SetValue(int(preferences.get('brightness', defaults['brightness'])))
        self.slider_volume.SetValue(int(preferences.get('volume', defaults['volume'])))
        # set up digital outputs
        self.checkbox_do_1.SetValue(int(preferences.get('digital_out_1', defaults['digital_out_1'])) > 0)
        self.checkbox_do_2.SetValue(int(preferences.get('digital_out_2', defaults['digital_out_2'])) > 0)

        # set up bluetooth
        choices = self.choice_BT_device_mode.GetItems()
        choice_index = choices.index(preferences.get('bluetooth_device_mode', defaults['bluetooth_device_mode']).strip())
        self.choice_BT_device_mode.Select(choice_index)
        choices = self.choice_BT_auth_mode.GetItems()
        choice_index = choices.index(preferences.get('bluetooth_authentication_mode', defaults['bluetooth_authentication_mode']).strip())
        self.choice_BT_auth_mode.Select(choice_index)
        # choices = self.choice_BT_connection_mode.GetItems()
        # choice_index = choices.index(preferences.get('bluetooth_connection_mode', defaults['bluetooth_connection_mode']).strip())
        # self.choice_BT_connection_mode.Select(choice_index)
        # remote_BTA = preferences.get('bluetooth_remote_address', "").strip()
        # self.text_ctrl_BTA_remote_address.SetValue(remote_BTA)
        # if (preferences.get('bluetooth_connection_mode') == 'auto'):
            # self.text_ctrl_BTA_remote_address.Enable()
            # self.BTA_label.Enable()
            # self.text_ctrl_BTA_remote_address.Show()
            # self.BTA_label.Show()
        # else:
            # self.text_ctrl_BTA_remote_address.Disable()
            # self.BTA_label.Disable()
            # self.text_ctrl_BTA_remote_address.Hide()
            # self.BTA_label.Hide()

        # set up misc preferences
        self.checkbox_select_files.SetValue(int(preferences.get('enable_select_files', defaults['enable_select_files'])) > 0)
        self.checkbox_swap.SetValue(int(preferences.get('enable_swap_inputs', defaults['enable_swap_inputs'])) > 0)
        self.checkbox_circular_deadzone.SetValue(int(preferences.get('joystick_dead_zone_shape', defaults['joystick_dead_zone_shape'])) > 0)
        self.checkbox_ps4_boot_mode.SetValue(int(preferences.get('enable_DS3_emulation',defaults['enable_DS3_emulation'])) > 0)
        self.checkbox_usb_A_host_mode.SetValue(int(preferences.get('enable_usb_a_host',defaults['enable_usb_a_host'])) > 0)
        self.checkbox_Titan2.SetValue(int(preferences.get('titan_two',defaults['titan_two'])) > 0)
        
        choices = self.choice_mouse_response.GetItems()
        choice_index = preferences.get('mouse_response_curve', defaults['mouse_response_curve'])
        self.choice_mouse_response.Select(int(choice_index))
        usb_comm = int(preferences.get('enable_usb_comm', defaults['enable_usb_comm'])) > 0
        self.checkbox_enable_usb_comm.SetValue(usb_comm)
        # get list of csv files
        if not self.list_box_csv_files.GetColumnCount(): # prevent second call here from addingmore columns
            self.list_box_csv_files.InsertColumn(0, "#")
            self.list_box_csv_files.InsertColumn(1, "filename")
            self.list_box_csv_files.InsertColumn(2, "Spreadsheet")
        self.update_quadstick_flash_files_items()
        vocola_installed = os.path.isdir(VocolaPath)
        if vocola_installed:
            # get list of voice files
            x = list_voice_files()
            self.list_box_voice_files.Clear()
            self.list_box_voice_files.InsertItems(x, 0)
        # prepare list of online factory game files widget
        if not self.online_game_files_list.GetColumnCount(): # prevent second call here from addingmore columns
            self.online_game_files_list.InsertColumn(0, "filename")
            self.online_game_files_list.InsertColumn(1, "Spreadsheet")
        if vocola_installed:
            # prepare list of online voice files widget
            if not self.online_voice_files_list.GetColumnCount():
                self.online_voice_files_list.InsertColumn(0, "filename")
                self.online_voice_files_list.InsertColumn(1, "game name")
        self.update_online_game_files_list_items() #updates widget, not actual list
        if vocola_installed:
            self.update_online_voice_files_list_items() #updates widget, not actual list
        # initialize any user confuration files
        if not self.user_game_files_list.GetColumnCount(): # prevent second call here from addingmore columns
            self.user_game_files_list.InsertColumn(0, "filename")
            self.user_game_files_list.InsertColumn(1, "Spreadsheet")
        self.update_user_game_files_list_items() #updates widget from settings["user_game_profiles"]
        # init virtual gamebus settings
        self.checkbox_enable_vg_DS4.SetValue(settings.get('enable_VG4', False))
        self.checkbox_enable_vg_X360.SetValue(settings.get('enable_VGX', False))

        # set up locale
        choices = self.choice_locale.GetItems()
        choice_index = choices.index(self.GetLocaleName(settings.get('current_locale')))
        self.choice_locale.Select(choice_index)

        self.text_ctrl_messages.AppendText("Set language to: " + self.GetLocale(self.choice_locale.GetStringSelection()) + "\n")

        self.checkbox_minimize_to_tray.SetValue(settings.get('minimize_to_tray', False))
        self.checkbox_start_minimized.SetValue(settings.get('start_mimimized', False))
        # init serial connection enable
        self.checkbox_enable_serial_port.SetValue(settings.get('enable_serial_port', True))      

        # set up external pointers tab
        self.TIR_DeadZone.SetValue(int(settings.get('TIR_DeadZone', 0)))
        #self.checkbox_trackir_start.SetValue(int(settings.get('TIR_Window', 0)))
        # Firmware notebook page widgets
        build_number = quadstick_drive_serial_number(self)
        self.build_number_text.SetValue(str(build_number))
        self._available_firmware_list = None
        if not self.list_ctrl_firmware.GetColumnCount():
            self.list_ctrl_firmware.InsertColumn(0, "build")
            self.list_ctrl_firmware.InsertColumn(1, "remark")
        if build_number is None or build_number < 1215:
            preferences["enable_DS3_emulation"] = "0" # make sure DS4 mode off
            self.checkbox_ps4_boot_mode.Disable()
        else:
            self.checkbox_ps4_boot_mode.Enable()
        if build_number is not None and build_number < 1301:
            if US1:
                self.text_ctrl_messages.AppendText("You will need to update the Firmware to use the UltraStik")
                
        if vocola_installed:
            try:
                generate_includes_vch_file()
                self.InitializeWordList('')
            except Exception as e:
                print("generate_includes_vch_file exception in update controls: ", repr(e))

        # determine if load_and_run should be enabled or disabled
        # if a com port previously used, usb comm enabled and the qs is plugged in
        # or if bluetooth ssp is enabled, then allow button to run
        d = find_quadstick_drive()        
        if not ( d or (( preferences.get('bluetooth_device_mode') == 'ssp' ) or has_serial_ports() or usb_comm )):
            self.button_load_and_run.Disable()
            self.button_download_csv.Disable()
            self.button_save.Disable()

        # set up event to force focus back to message window
        #self.text_ctrl_messages.Bind(wx.EVT_KILL_FOCUS, self.TextPaneKillFocusEvent)

        check_for_newer_version(self)
        return True #indicate good read

    def GetPanelID(self, panel):
        for tab_id in range(self.notebook.GetPageCount()):
            if self.notebook.GetPage(tab_id) == panel:
                return tab_id

    def UpdatePageAndLabelNames(self):
        self.notebook.SetPageText(self.GetPanelID(self.notebook_game_files), _("Game Files"))
        self.notebook.SetPageText(self.GetPanelID(self.notebook_joystick), _("Joystick"))
        self.notebook.SetPageText(self.GetPanelID(self.notebook_misc), _("Misc"))
        self.notebook.SetPageText(self.GetPanelID(self.notebook_firmware), _("Firmware"))
        self.notebook.SetPageText(self.GetPanelID(self.notebook_pane_transcript), _("Voice Control"))
        self.notebook.SetPageText(self.GetPanelID(self.notebook_voice_files), _("Voice Files"))
        self.notebook.SetPageText(self.GetPanelID(self.notebook_external_pointers), _("External Pointers"))

        # self.SetTitle(_("QuadStick"))
        self.SetToolTip(_("Change preference settings for QuadStick"))

        self.box_quadstick_flash.SetLabel(_("In QuadStick"))
        self.list_box_csv_files.SetToolTip(_("Double click to Edit"))

        self.button_load_and_run.SetLabelText(_("Load and Run File\nin QuadStick"))
        self.button_load_and_run.SetToolTip(_("Requires a USB, Bluetooth or serial connection to the QuadStick"))

        self.print_file_list.SetLabelText(_("Print file list"))
        self.print_file_list.SetToolTip(_("Opens a browser window with the list of files in the QuadStick"))

        self.button_delete_csv.SetLabelText(_("Remove\nfrom QuadStick"))
        self.button_delete_csv.SetToolTip(_("Remove the game's profile CSV file from the QuadStick"))
        
        self.box_factory_profiles.SetLabel(_("Quadstick Factory profiles"))
        self.online_game_files_list.SetToolTip(_("Double Click to edit. Drag over to download into to QuadStick flash."))

        self.button_edit_spreadsheet.SetLabelText(_("Open Configuration Spreadsheet"))
        self.button_edit_spreadsheet.SetToolTip(_("Opens browser on the selected configuration spreadsheet"))

        self.button_download_csv.SetLabelText(_("Download to QuadStick"))
        self.button_download_csv.SetToolTip(_("Download a game's custom CSV file into the QuadStick"))

        self.custom_profiles_box.SetLabel(_("User Custom profiles"))
        self.user_game_files_list.SetToolTip(_("Double Click to Edit.  Drag over to download into to QuadStick flash."))

        self.button_add_user_game.SetLabelText(_("Add Game to User List"))
        self.button_add_user_game.SetToolTip(_("Click button and paste URL for a custom configuration spreadsheet into the dialog box"))

        self.button_remove_user_game.SetLabelText(_("Remove Game from User List"))
        self.button_remove_user_game.SetToolTip(_("Removes the selected User Custom game from the list."))

        self.label_joystick_info.SetLabelText(_("Sets Joystick physical range of motion.\n\nLarger numbers make the \njoystick less sensitive.\n\nClick Save preferences \nafter making adjustments."))
        self.slider_UP.SetToolTip(_("Joystick UP movement"))

        self.radio_box_slider_linking.SetLabelText(_("Link Sliders:"))
        self.radio_box_slider_linking.SetItemLabel(0, _("all"))
        self.radio_box_slider_linking.SetItemLabel(1, _("horizontal"))
        self.radio_box_slider_linking.SetItemLabel(2, _("vertical"))

        self.slider_LEFT.SetToolTip(_("Joystick LEFT movement"))
        self.slider_NEUTRAL.SetToolTip(_("Center dead zone.  Set high enough to prevent wandering mouse or joystick."))
        self.slider_RIGHT.SetToolTip(_("Joystick RIGHT movement"))
        self.slider_DOWN.SetToolTip(_("Joystick DOWN movement"))

        self.box_joystick_preference.SetLabelText(_("Calculated joystick preference values:"))
        self.joystick_preference_grid.SetColLabelValue(0, _("Preference"))
        self.joystick_preference_grid.SetColLabelValue(1, _("Value"))
        self.joystick_preference_grid.SetToolTip(_("Preferences File values"))

        self.box_mouse_speed.SetLabelText(_("Mouse speed:"))
        self.slider_mouse_speed.SetToolTip(_("Mouse speed relative to joystick movement"))

        self.box_SP_max.SetLabelText(_("Sip/Puff Max pressure"))
        self.slider_SP_max.SetToolTip(_("Maximum pressure to scale to 100% signal"))

        self.box_brightness.SetLabelText(_("Brightness"))
        self.slider_brightness.SetToolTip(_("LED brightness"))

        self.box_SP_high.SetLabelText(_("Sip/Puff High threshold"))
        self.slider_SP_high.SetToolTip(_("Pressure at which to trigger output"))

        self.box_volume.SetLabelText(_("Volume"))
        self.slider_volume.SetToolTip(_("Speaker volume"))

        self.box_SP_low.SetLabelText(_("Sip/Puff Low threshold"))
        self.slider_SP_low.SetToolTip(_("Low pressure threshold."))

        self.box_D_Pad_outer_ring.SetLabelText(_("D-Pad outer ring"))
        self.slider_D_Pad_outer_ring.SetToolTip(_("Percent joystick deflection to active D-Pad"))

        self.box_Lip_max.SetLabelText(_("Lip maximum"))
        self.slider_Lip_max.SetToolTip(_("Percent of lip sensor physical movement to exert full signal"))

        self.box_D_Pad_inner_ring.SetLabelText(_("D-Pad inner ring"))
        self.slider_D_Pad_inner_ring.SetToolTip(_("Percent joystick deflection to active inner D-Pad after delay"))

        self.box_Lip_min.SetLabelText(_("Lip minimum"))
        self.slider_Lip_min.SetToolTip(_("Percent lip sensor position to activate signal"))

        self.box_do.SetLabelText(_("Digital Outputs"))

        self.checkbox_do_1.SetLabelText(_("Digital output 1"))
        self.checkbox_do_1.SetToolTip(_("Controls default Digital Output 1 on/off state"))

        self.checkbox_do_2.SetLabelText(_("Digital output 2"))
        self.checkbox_do_2.SetToolTip(_("Controls default Digital Output 2 on/off state"))

        self.box_mouse.SetLabelText(_("Mouse"))

        self.checkbox_circular_deadzone.SetLabelText(_("Enable Circular Dead Zone"))
        self.checkbox_circular_deadzone.SetToolTip(_("Select Circular or Square Dead Zone for Joystick"))

        self.label_mouse_response.SetLabelText(_("Mouse Response Curve: "))
        self.label_mouse_response.SetToolTip(_("Selects how the joystick position is converted to mouse movement"))

        self.box_BT.SetLabelText(_("Bluetooth:"))

        self.label_device.SetLabelText(_("Device:"))
        self.choice_BT_device_mode.SetToolTip(_("Device mode.  Controls what kind of device QuadStick is for Bluetooth function"))

        self.label_auth.SetLabelText(_("Auth:"))
        self.choice_BT_auth_mode.SetToolTip(_("Authentication mode.  Default: 4"))

        self.checkbox_enable_serial_port.SetLabelText(_("Enable file management over serial port"))
        self.checkbox_enable_serial_port.SetToolTip(_("Allows external pointer and file commands over Bluetooth or serial port when QuadStick is not plugged in to the PC"))

        self.box_SP_misc.SetLabelText(_("Sip/Puff misc"))

        self.checkbox_select_files.SetLabelText(_("Enable select file with side tube"))
        self.checkbox_select_files.SetToolTip(_("Enables Select File for Long Sip on Right side tube "))

        self.checkbox_swap.SetLabelText(_("Enable swap inputs with side tube"))
        self.checkbox_swap.SetToolTip(_("Enables Swap Lip input with Long Puff on Right side tube"))

        self.label_SP_low_delay.SetLabelText(_("Low threshold delay:"))
        self.spin_ctrl_SP_low_delay.SetToolTip(_("Low (or Soft) Sip/Puff signals are sensed after a short delay"))

        self.label_SP_high_delay.SetLabelText(_("High threshold delay:"))
        self.spin_ctrl_SP_high_delay.SetToolTip(_("Long high threshold Sip/Puffs can "))

        self.box_usb_settings.SetLabelText(_("USB settings"))

        self.checkbox_ps4_boot_mode.SetLabelText(_("Enable boot in PS4 USB mode"))
        self.checkbox_ps4_boot_mode.SetToolTip(_("Controls the USB emulation when the QuadStick powers up.  Required if using the PS4 console or if using Touchpad or motion controls with the virtual DS4 emulation"))

        self.checkbox_Titan2.SetLabelText(_("Titan Two PS4 flag"))
        self.checkbox_Titan2.SetToolTip(_("Disables Playstation authentication responses.  The Titan 2 passes PS4 authentication requests and responses must be disabled to avoid interruptions."))

        self.checkbox_enable_usb_comm.SetLabelText(_("Enable Voice Commands over USB"))
        self.checkbox_enable_usb_comm.SetToolTip(_("Allows voice commands over USB instead of Bluetooth or Serial cable"))

        self.checkbox_usb_A_host_mode.SetLabelText(_("Enable USB-A Host mode"))
        self.checkbox_usb_A_host_mode.SetToolTip(_("Must be on to support DS4, UltraStik, or other devices connected to the USB-A port."))

        self.box_vg.SetLabelText(_("Virtual gamepad emulator"))

        self.checkbox_enable_vg_X360.SetLabelText(_("Enable virtual XBox controller emulation"))
        self.checkbox_enable_vg_X360.SetToolTip(_("Enables the ViGEmBus XBox virtual controller.  Allows playing PC games that use the XBox controller, or XBox Remote Play"))

        self.checkbox_enable_vg_DS4.SetLabelText(_("Enable virtual Dualshock 4 emulation"))
        self.checkbox_enable_vg_DS4.SetToolTip(_("Enables the ViGEmBus DS4 virtual controller.  Allows playing PC games that use the DS4 controller, or Playstation Remote Play"))

        self.checkbox__enable_HIDHide.SetLabelText(_("Enable HIDHide to hide Quadstick from games"))
        self.checkbox__enable_HIDHide.SetToolTip(_("When using an XBox or DS4 virtual controller, this setting prevents games and other programs from detecting the presence of the Quadstick's controller interface if they detect activity from older Direct Input controllers."))

        self.box_qmp_settings.SetLabelText(_("QMP settings"))

        self.label_locale.SetLabelText(_("Language:"))
        self.choice_locale.SetToolTip(_("Change the Language of the QMP Program."))
        self.choice_locale.SetString(0, _("English"))
        self.choice_locale.SetString(1, _("German"))

        self.checkbox_minimize_to_tray.SetLabelText(_("Minimize to tray"))
        self.checkbox_minimize_to_tray.SetToolTip(_("QMP will minimze to the task bar tray when checked"))

        self.checkbox_start_minimized.SetLabelText(_("Start QMP minimized"))
        self.checkbox_start_minimized.SetToolTip(_("Start QMP minimized."))

        self.box_current_firmware.SetLabelText(_("Current Firmware"))
        self.label_new_version.SetLabelText(_("\nEach time a new version of the QuadStick \nfirmware is built, a build number is \nassigned to identify that version"))
        self.box_build_number.SetLabelText(_("Build number:"))
        self.label_firmware_update.SetLabelText(_("\n\nDuring the update process, this program \nwill attempt to backup and restore the \ngame CSV files on the QuadStick."))

        self.box_available_firmware.SetLabelText(_("Available firmware"))
        self.download_selected_build.SetLabelText(_("Download selected Firmware\nto QuadStick"))

        self.voice_cmd_transcript_box.SetLabelText(_("Voice Command Transcript"))
        self.word_list.SetToolTip(_("Currently active voice commands"))

        self.box_voice_files.SetLabelText(_("In Vocola folder"))
        self.button_edit_voice_file.SetLabelText(_("Edit Voice File"))

        self.button_delete_voice_file.SetLabelText(_("Delete game file from folder"))
        self.button_delete_voice_file.SetToolTip(_("Removes a game's VCH file from Vocola folder and adjusts VCL scripts to match"))

        self.box_voice_cmd_files.SetLabelText(_("Vocola - Voice Command Language Files"))
        
        self.button_download_voice_file.SetLabelText(_("Download to Vocola folder"))
        self.button_download_voice_file.SetToolTip(_("Download game VCH file from Quadstick.com and included it in voice commands"))

        self.box_external_pointers_settings.SetLabelText(_("Settings:"))

        self.box_external_pointers_dead_zone.SetLabelText(_("External Pointer Center Dead Zone:"))
        self.TIR_DeadZone.SetToolTip(_("Size of no signal area in center for UltraStik or TrackIR"))
        
        self.box_mouse_capture_settings.SetLabelText(_("Mouse Capture Settings:"))
        self.capture_mode.SetToolTip(_("Absolute position is for Project IRIS FPS Interactor.  Motion is for regular mouse or trackball."))

        self.box_mouse_capture_center_x.SetLabelText(_("Center X:"))
        self.center_x.SetToolTip(_("Set center X to aiming point of Project IRIS FPS Interactor"))

        self.box_mouse_capture_center_y.SetLabelText(_("Center Y:"))
        self.center_y.SetToolTip(_("Set center Y to aiming point of Project IRIS FPS Interactor"))

        self.box_mouse_capture_width.SetLabelText(_("Width:"))
        self.position_width.SetToolTip(_("Set to width of Project IRIS FPS Interactor"))

        self.box_mouse_capture_height.SetLabelText(_("Height:"))
        self.position_height.SetToolTip(_("Set to height of Project IRIS FPS Interactor"))

        self.box_mouse_capture_gain_x.SetLabelText(_("Gain X:"))
        self.gain_x.SetToolTip(_("Controls sensitiviy X of mouse. Default is 100%."))

        self.box_mouse_capture_gain_y.SetLabelText(_("Gain Y:"))
        self.gain_y.SetToolTip(_("Controls sensitiviy Y of mouse. Default is 100%."))

        self.StartMouseCapture.SetLabelText(_("Capture Mouse Location\nPress F10 to turn on and off"))
        self.StartMouseCapture.SetToolTip(_("Opens a full screen window to capture mouse and relays info to the QuadStick"))

        self.button_save.SetLabelText(_("Save\nPreferences\nto\nQuadStick"))
        self.button_cancel.SetLabelText(_("Close"))
        self.button_reload.SetLabelText(_("Reload\nPreferences\nfrom\nQuadStick"))

        self.notebook_joystick.Layout()
        self.notebook_misc.Layout()
        self.notebook_firmware.Layout()

        self.Update()
        self.Refresh()

    def ChangeLocale(self, locale):
        current_locale = self.GetLocale(self.choice_locale.GetStringSelection())
        settings['current_locale'] = current_locale
        locale = gettext.translation('locale', resource_path('./locales'), [current_locale])
        locale.install()
        _ = locale.gettext
        self.text_ctrl_messages.AppendText("Set language to: " + current_locale + "\n")
        self.UpdatePageAndLabelNames()

    def GetLocale(self, localename):
        if localename == _("English"):
            return "en"
        elif localename == _("German"):
            return "de"

    def GetLocaleName(self, locale):
        if locale == "en":
            return _("English")
        elif locale == "de":
            return _("German")

    def TextPaneKillFocusEvent(self, event):
        print('pane lost focus')
        wx.CallLater(3000, self.voice_transcript.SetFocus)
        event.Skip()
        
    def DeleteFromQuadStickEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'DeleteFromQuadStickEvent'")
        #filename = self.list_box_csv_files.GetStringSelection()
        try:
            if self.list_box_csv_files.GetSelectedItemCount() > 0:
                confirm = wx.MessageDialog( self, "Delete the selected files?", caption="Please confirm", style=wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION | wx.STAY_ON_TOP )
                result = confirm.ShowModal()
                #self.text_ctrl_messages.AppendText(repr(result) + "\n")
                if result == wx.ID_YES:
                    selection = self.list_box_csv_files.GetFirstSelected()
                    while selection >= 0:
                        filename = self.list_box_csv_files.GetItem(selection, 1).GetText()
                        print(repr(filename))
                        if filename == 'default.csv' or filename == 'prefs.csv':
                            self.text_ctrl_messages.AppendText("Sorry, cannot remove: " + filename + "\n")
                        else:
                            try:
                                d = find_quadstick_drive()
                                if d is None:
                                    self.microterm.delete_file(filename)
                                else:
                                    pathname = d + filename
                                    os.remove(pathname)
                                self.text_ctrl_messages.AppendText("Removed: " + filename + "\n")
                                #refresh list
                            except Exception as e:
                                print("DeleteFromQuadStickEvent exception: ", repr(e))
                                self.text_ctrl_messages.AppendText("Exception while removing: " + filename + "\n")
                        selection = self.list_box_csv_files.GetNextSelected(selection)
            self.update_quadstick_flash_files_items()
        except Exception as e:
            print("Exception during DeleteFromQuadStickEvent")
            print(repr(e))
        event.Skip()
    def DownloadToQuadStickEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'DownloadToQuadStickEvent'")
        self.DownloadCSVFileEvent(event)
    def ScanGoogleGameProfilesEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        #global settings
        print("Event handler 'ScanGoogleGameProfilesEvent'")
        # (game_name, folder, path, name))
        #self.online_game_files_list.ClearAll()
        t = threading.Thread(target=self._ScanGoogleGameProfilesEvent) #, args=(self,))
        t.daemon = True
        t.start()
        #self._ScanGoogleGameProfilesEvent()
        #event.Skip()

    def _ScanGoogleGameProfilesEvent(self):
        try:
            self.SetCursor(wx.Cursor(wx.CURSOR_WAIT))
            import time
            t1 = time.time()
            games, voices = get_factory_game_and_voice_files()  # get csv and vch/vcl file info from Google
            t2 = time.time()
            print("#####  TIME TO GET GAME PROFILES #### ", t2 - t1)
            self.SetCursor(wx.Cursor(wx.CURSOR_DEFAULT))
            #self._game_profiles = [fn for fn in files if (fn[3].find(".csv") > 0)]
            self._game_profiles = games
            QMP.text_ctrl_messages.AppendText("Retrieved " + str(len(self._game_profiles))+ " game files\r\n")
            self._voice_files = voices
            QMP.text_ctrl_messages.AppendText("Retrieved " + str(len(self._voice_files))+ " voice files\r\n") # game_name

            self.update_online_game_files_list_items()
            self.update_online_voice_files_list_items()
        except Exception as e:
            print("_ScanGoogleGameProfilesEvent exception: ", repr(e))

    
    def update_online_game_files_list_items(self): # updates the display widget with the current game list
        self.online_game_files_list.DeleteAllItems()
        index = 0

        self._game_profiles = sorted(self._game_profiles, key=lambda f: f['name'].lower())

        for f in self._game_profiles:
            #(game_name, folder, path, name, url) 
            name = f["name"]
            csv_name = f["csv_name"]
            #print("game name: ", name)
            self.online_game_files_list.InsertItem(index, csv_name)
            self.online_game_files_list.SetItem(index, 1, name)
            index += 1
        self.online_game_files_list.SetColumnWidth(0, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items
        self.online_game_files_list.SetColumnWidth(1, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items

    def update_online_voice_files_list_items(self): # updates the display widget with the current voice list
        self.online_voice_files_list.DeleteAllItems()
        index = 0
        for f in self._voice_files:
            #(game_name, folder, path, name, url) = f
            game_name = f["name"]
            name = f["file_name"]
            self.online_voice_files_list.InsertItem(index, name)  # was InsertStringItem
            self.online_voice_files_list.SetItem(index, 1, game_name)  #SetStringItem
            index += 1
        self.online_voice_files_list.SetColumnWidth(0, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items
        self.online_voice_files_list.SetColumnWidth(1, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items

    def update_user_game_files_list_items(self): 
        print("update_user_game_files_list_items")
        self.user_game_files_list.DeleteAllItems()
        index = 0
        user_game_profiles = settings.get("user_game_profiles", [])
        #user_game_profiles = [] #**********************************

        if len(user_game_profiles) == 0:
            # if user game profiles empty, check for old 1.04 version files
            url = settings.get('profile_url', None)  # get old saved url
            #url = """https://googledrive.com/host/0BwJQJADcHggka2htZ0FlM2FMdTQ/"""
            if url:  # aha! first time running after an update
                try:
                    files = get_game_profiles(url, self)  # get csv and vch/vcl file info from Google
                    print("IMPORT OLD FILES: ", repr(files))
                    _game_profiles = [fn for fn in files if (fn[3].find(".csv") > 0)]
                    for f in _game_profiles:
                        (game_name, folder, path, name, url) = f
                        print("game name: ", game_name)
                        try:
                            if path:
                                text = read_google_drive_file(path, url)  # read the csv file
                                if text.find("/spreadsheets/d/") > 0: #if has a spreadsheet key
                                    text = text.split("/spreadsheets/d/")[1]
                                    text = text.split("/")[0]  # we have the isolated ID
                                    info = {"name":game_name, "id": text, "csv_name":name}
                                    user_game_profiles.append(info)
                        except Exception as e:
                            print(repr(e))
                except Exception as e:
                    print(repr(e))
            if len(user_game_profiles) > 0:  # something was imported, save list
                user_game_profiles = sorted(user_game_profiles, key=lambda f: f['name'].lower())
                settings["user_game_profiles"] = user_game_profiles
                settings["profile_url"] = None  # flag that we have imported already
                # save_repr_file(settings)                
                
        # list of dictionary objects with: {"name":name, "id": id, "csv_name":csv_file_name}
        user_game_profiles = sorted(user_game_profiles, key=lambda f: f['name'].lower())
        for gp in user_game_profiles:
            game_name = gp['name']
            name = gp["csv_name"]
            print("game name: ", game_name, " csv_name: ", name)
            self.user_game_files_list.InsertItem(index, name)
            self.user_game_files_list.SetItem(index, 1, game_name)
            index += 1
        self.user_game_files_list.SetColumnWidth(0, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items
        self.user_game_files_list.SetColumnWidth(1, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items

    def update_quadstick_flash_files_items(self):
        self.list_box_csv_files.DeleteAllItems()
        index = 0
        _csv_files = []
        files = list_quadstick_csv_files(self)  # a tuple of (csv, id, name)
        telemetry_log('csv_files&' + urllib.parse.quote_plus(repr(files)))
        print(repr(files))

        file_number = 1
        for f in files:
            number_str = str(file_number)
            if f[0] == 'prefs.csv':
                number_str = " "
                file_number = 0
            self.list_box_csv_files.InsertItem(index, number_str)
            self.list_box_csv_files.SetItem(index, 1, f[0])
            self.list_box_csv_files.SetItem(index, 2, f[2])
            index += 1
            file_number += 1
            _csv_files.append({"filename":f[0], "id":f[1], "name":f[2].strip()})
        self.list_box_csv_files.SetColumnWidth(0, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items
        self.list_box_csv_files.SetColumnWidth(1, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items
        self.list_box_csv_files.SetColumnWidth(2, wx.LIST_AUTOSIZE_USEHEADER) # resize column to match new items
        self._csv_files = _csv_files

    def user_game_files_dropped(self, x, y, data):
        # add a user game config file to the list
        # check for validity        
        self.SetCursor(wx.Cursor(wx.CURSOR_WAIT))
        try:
            info = xlsx2csv.get_config_profile_info_from_url(data)
            if info:
                self.text_ctrl_messages.AppendText("File %s added to user list\n" % (info.get("name"),))
                gps = settings.get("user_game_profiles", [])
                # check for pre-existing matching ID
                for gp in gps:
                    if gp['id'] == info['id']:
                        #duplicate
                        self.text_ctrl_messages.AppendText("File found: %s \n" % (info.get("name"),))
                        if gp.get("name") != info.get("name"):
                            # rename spreadsheet in list
                            if info.get("name") is not None:
                                self.text_ctrl_messages.AppendText("File renamed from: %s to: %s\n" % (gp.get("name"), info.get("name"),))
                                gp['name'] = info['name']
                                self.update_user_game_files_list_items()
                        break
                # add new id and sort
                else:
                    gps.append(info)
                settings["user_game_profiles"] = sorted(gps, key=lambda f: f['name'].lower()) # update settings with sorted list
            else:
                self.text_ctrl_messages.AppendText("Error: Google spreadsheet is not publicly shared or published\n" )
            self.update_user_game_files_list_items()
        finally:
            self.SetCursor(wx.Cursor(wx.CURSOR_DEFAULT))
        
    def csv_files_dropped(self, x, y, data):
        # add a user game config file to the list
        # get the user's email address if necessary
        email = settings.get('user_email_address', "")
        if len(email) == 0:
            dlg = wx.TextEntryDialog(self, 'Please Enter Your Email Address','Google Spreadsheets Acount') 
            if dlg.ShowModal() == wx.ID_OK:
                print(dlg.GetValue())
                settings['user_email_address'] = dlg.GetValue()
                telemetry_log('email&email=' + settings.get('user_email_address'))
            dlg.Destroy() 

        # check for validity        
        self.SetCursor(wx.Cursor(wx.CURSOR_WAIT))
        try:
            info = xlsx2csv.get_config_profile_info_from_url(data)
            if info:
                self.user_game_files_dropped(x, y, data) # update the list
                # now download csv into quadstick
                gp = info
                id = gp["id"]
                path = urllib.parse.quote(gp["name"])
                d = find_quadstick_drive()
                print("download csv: ", id, d)
                if xlsx2csv.write_csv_file_for(id, d, self): # download and copy csv into quadstick
                    # refresh widget list
                    self.text_ctrl_messages.AppendText("Copied %s into QuadStick\n" % (info["csv_name"],))
                    self.update_quadstick_flash_files_items()
            else:
                self.text_ctrl_messages.AppendText("Error: Google spreadsheet is not publicly shared or published\n" )
            self.update_user_game_files_list_items()
        except Exception as e:
            self.text_ctrl_messages.AppendText("Error in csv_files_dropped: " + repr(e) +"\n" )
        self.SetCursor(wx.Cursor(wx.CURSOR_DEFAULT))

    def DownloadCSVFileEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'DownloadCSVFileEvent'")
        
        # get the user's email address if necessary
        email = settings.get('user_email_address', "")
        if len(email) == 0:
            dlg = wx.TextEntryDialog(self, 'Please Enter Your Email Address','Google Spreadsheets Acount') 
            if dlg.ShowModal() == wx.ID_OK:
                print(dlg.GetValue())
                settings['user_email_address'] = dlg.GetValue()
                telemetry_log('email&email=' + settings.get('user_email_address'))
            dlg.Destroy() 
        #item = self.online_game_files_list.GetFirstSelected()
        item = self._last_game_list_selected.GetFirstSelected()

        print("DownloadCSVFileEvent item ", repr(item))
        self.SetCursor(wx.Cursor(wx.CURSOR_WAIT))
        try:
            path = ''
            id = ''
            # handle user list download
            item = self._last_game_list_selected.GetFirstSelected()
            #item = self.online_game_files_list.GetFirstSelected()
            print("item ", repr(item))
            while item >= 0:
                print("selected item: ", item)
                if self._last_game_list_selected == self.user_game_files_list:
                    print("download user game")
                    gps = settings.get("user_game_profiles", [])
                elif self._last_game_list_selected == self.list_box_csv_files:
                    gps = self._csv_files
                else:
                    print("download factory game")
                    gps = self._game_profiles #factory
                try:
                    gp = gps[item]
                    id = gp["id"]
                    path = urllib.parse.quote(gp["name"])
                    d = find_quadstick_drive()
                    print("download csv: ", id, d)
                    if xlsx2csv.write_csv_file_for(id, d, self): # download and copy csv into quadstick
                        if self._last_game_list_selected == self.user_game_files_list:
                            info, wb = xlsx2csv.get_config_profile_info(id)
                            if info:  # if the csv filename changed, update user list
                                if gp.get("name") != info.get("name"):
                                    gp['name'] = info['name']
                                    self.update_user_game_files_list_items()                       
                        self.text_ctrl_messages.AppendText("Downloaded %s into QuadStick\n" % (gp["name"],))
                except Exception as e:
                    print(repr(e))
                    pass
                item = self._last_game_list_selected.GetNextSelected(item)
            #refresh list
            self.update_quadstick_flash_files_items()
            telemetry_log('downloadcsv&ss=' + id + '&path=' + path + '&email=' + settings.get("user_email_address",""))
        finally:
            self.SetCursor(wx.Cursor(wx.CURSOR_DEFAULT))
        event.Skip()
    
    def DeleteFromVocolaEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'DeleteFromVocolaEvent'")
        selections = self.list_box_voice_files.GetSelections()
        print(repr(selections))
        items = self.list_box_voice_files.GetItems()
        if len(selections) > 0:
            confirm = wx.MessageDialog( self, "Delete the selected files?", caption="Please confirm", style=wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION | wx.STAY_ON_TOP )
            result = confirm.ShowModal()
            #self.text_ctrl_messages.AppendText(repr(result) + "\n")
            if result != wx.ID_YES:
                selections = []                
        for selection in selections:
            filename = items[selection]
            print(repr(filename))
            try:
                pathname = VocolaPath + filename
                os.remove(pathname)
                self.text_ctrl_messages.AppendText("Removed: " + filename + "\n")
                #refresh list
            except:
                print(pathname + ' not found to delete')
        generate_includes_vch_file() # refresh the _includes.vch file
        #refresh list
        x = list_voice_files()
        self.list_box_voice_files.Clear()
        self.list_box_voice_files.InsertItems(x, 0)
        event.Skip()
        
    def OnEditVoiceFile(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'OnEditVoiceFile'")
        selections = self.list_box_voice_files.GetSelections()
        print(repr(selections))
        items = self.list_box_voice_files.GetItems()
        for selection in selections:
            filename = items[selection]
            print(repr(filename))
            try:
                pathname = VocolaPath + filename
                subprocess.Popen(["notepad.exe",pathname])
                self.text_ctrl_messages.AppendText("Edit: " + filename + "\n")
                break
                #refresh list
            except:
                print(pathname + ' not found to delete')
        generate_includes_vch_file() # refresh the _includes.vch file
        #refresh list
        x = list_voice_files()
        self.list_box_voice_files.Clear()
        self.list_box_voice_files.InsertItems(x, 0)
        event.Skip()
    def DownloadVoiceFileEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'DownloadVoiceFileEvent'")
        item = self.online_voice_files_list.GetFirstSelected()
        print("item ", repr(item))
        while item >= 0:
            voice_file_info = self._voice_files[item]
            id = voice_file_info["id"]
            file_name = voice_file_info["file_name"]
            text = get_google_drive_file_by_id(id)
            save_voice_file(file_name, text)
            self.text_ctrl_messages.AppendText("Copied: " + file_name + "\r\n")
            item = self.online_voice_files_list.GetNextSelected(item)
        #refresh list
        x = list_voice_files()
        self.list_box_voice_files.Clear()
        self.list_box_voice_files.InsertItems(x, 0)
        event.Skip()
    def DownloadToVocolaEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'DownloadToVocolaEvent'")
        self.DownloadVoiceFileEvent(event)
    def NotebookPageChangedEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'NotebookPageChangedEvent'")
        print(repr(event.GetSelection()))
        page_index = event.GetSelection()
        if page_index == 3: # firmware page
            if self._available_firmware_list is None: # first time
                self.SetCursor(wx.Cursor(wx.CURSOR_WAIT))
                self.text_ctrl_messages.AppendText("Downloading firmware build list\n")
                wx.Yield()
                self._builds = get_firmware_versions()
                print(repr(self._builds))
                self._available_firmware_list = [bld.get("version","ukn") for bld in self._builds]
                self.list_ctrl_firmware.DeleteAllItems()
                print("list_ctrl_firmware.DeleteAllItems()")
                index = 0
                for bld in self._builds:
                    build = ("     " + bld.get("version","ukn"))[-4:]
                    self.list_ctrl_firmware.InsertItem(index, build) #name)
                    self.list_ctrl_firmware.SetItem(index, 1, bld.get("comment",""))
                    index += 1
                self.list_ctrl_firmware.SetColumnWidth(1,-1)
                self.SetCursor(wx.Cursor(wx.CURSOR_DEFAULT))

                #self.online_voice_files_list.SetColumnWidth(0, wx.LIST_AUTOSIZE)
        # if page_index == 0 or page_index == 5: # games or voice page
            # if self._read_online_files_flag:
                # self._read_online_files_flag = False
                # if len(self._game_profiles) == 0:
                    # self.ScanGoogleGameProfilesEvent(event) # updates csv and vch files
                # #self.text_ctrl_messages.SetFocus()  # return the focus to the text pane
        settings['last_page'] = page_index
        event.Skip()
    def DownloadFirmwareEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        global QuadStickDrive
        global QS
        import shutil
        import tempfile
        import win32file
        from zipfile import ZipFile
        print("Event handler 'DownloadFirmwareEvent'")
        item = self.list_ctrl_firmware.GetFirstSelected()
        print("item ", repr(item))
        if item >= 0:
            bld_version = self._builds[item]["version"]
            if self.build_number_text.GetValue() == bld_version:
                self.text_ctrl_messages.AppendText("Sorry, selected build is already installed in QuadStick\n")
                event.Skip()
                return
            # find joystick.bin file and download it
            self.SetCursor(wx.Cursor(wx.CURSOR_WAIT))
            self.text_ctrl_messages.AppendText("Download new firmware file.  Please wait...\n")
            firmware_image_zip = get_google_drive_file_by_id(self._builds[item]["id"])
            # save contents of quadstick
            tmp_folder_path = tempfile.gettempdir() + '\\quad_stick_temporary_files'
            shutil.rmtree(tmp_folder_path, True)
            tmp_folder = os.mkdir(tmp_folder_path)
            # write zip file to temp folder and unzip it
            with open(tmp_folder_path + "\\Joystick.zip", "wb", 0) as zipFile:
                zipFile.write(firmware_image_zip)
                zipFile.flush()
            # unzip file 
            with ZipFile(tmp_folder_path + "\\Joystick.zip", "r", 0) as zipFile:
                firmware_image = zipFile.read("Joystick.bin")
            # get quadstick folder
            qs = find_quadstick_drive()
            # copy csv files to temp folder
            self.text_ctrl_messages.AppendText("Backup game configuration files\n")
            csv_file_list = list_quadstick_csv_files(self)
            # give prefs.csv file special handling if PS4 boot mode enabled
            try:
                if bld_version < "1215": # old firmware can't work with PS4 boot mode
                    p = load_preferences_file(self)
                    p["enable_DS3_emulation"] = "0" # make sure DS4 mode off
                    save_preferences_file(p)
            except Exception as e:
                print(repr(e))
            for file in csv_file_list:
                shutil.copyfile(qs + file[0], tmp_folder_path + "\\" + file[0])
                self.text_ctrl_messages.AppendText(" " + file[0] + "\n")
                wx.Yield()
            self.text_ctrl_messages.AppendText("CSV files backed up to: " + tmp_folder_path + "\n")
            self.text_ctrl_messages.AppendText("Write new firmware file to QuadStick\n")
            handle = win32file.CreateFile(qs + "Joystick.tmp", win32file.GENERIC_WRITE , 0 , None, win32file.CREATE_ALWAYS , win32file.FILE_FLAG_WRITE_THROUGH , None )
            print("file handle: ", handle)
            print("image size: ", len(firmware_image))
            win32file.WriteFile(handle, firmware_image)
            win32file.FlushFileBuffers(handle)
            win32file.CloseHandle(handle)
            # with open(qs + "Joystick.tmp", 'wb', 0) as fwfile:
                # # write header
                # fwfile.write(firmware_image)
                # fwfile.flush()
                # os.fsync(fwfile.fileno())
            sleep(5)
            try:
                os.remove(qs + "Joystick.bin")
            except:
                pass
            os.rename(qs + "Joystick.tmp",qs + "Joystick.bin")
            #del(fwfile)
            self.text_ctrl_messages.AppendText("Wait for QuadStick to reboot...\n")
            wx.Yield()
            if QS:
                QS.close()
                QS = None
            # wait for quadstick to disappear from drive list
            for sec in range(40):
                sleep(1.0)
                wx.Yield()
                print(sec)
                self.text_ctrl_messages.AppendText(".")
                # force actual search for QS
                if find_quadstick_drive(True) is None: break
            if find_quadstick_drive(True) is None:
                self.text_ctrl_messages.AppendText("\nQuadStick rebooting\n")
            else:
                self.text_ctrl_messages.AppendText("\nQuadStick reboot not detected\n")
                wx.MessageBox("The QuadStick did not automatically reboot!\n\nIn Windows Explorer 'Eject' the QuadStick drive.\nIf QuadStick does not restart in ten seconds,\nunplug it and plug it back in\nthen click OK", 'Error', wx.OK | wx.ICON_ERROR)
            self.text_ctrl_messages.AppendText("Waiting for QuadStick to install new firmware...\n")
            for i in range(5):
                for sec in range(60):
                    sleep(1.0)
                    wx.Yield()
                    print(sec)
                    self.text_ctrl_messages.AppendText(".")
                    if find_quadstick_drive(): break
                qs = find_quadstick_drive()
                if qs:
                    # copy csv files back to quadstick
                    self.text_ctrl_messages.AppendText("\nCopy files back\n")
                    sleep(4)
                    for file in csv_file_list:
                        shutil.copyfile(tmp_folder_path + "\\" + file[0], qs + file[0])
                        self.text_ctrl_messages.AppendText(" " + file[0] + "\n")
                        wx.Yield()
                    self.text_ctrl_messages.AppendText("Done!\n")
                    
                    # reopen game controller interface
                    try:
                        QS = QuadStickHID(self, self.VG)
                        QS.enable(settings.get('enable_CM', True))
                        updater = None
                        if CM: updater = CM.update
                        QS = QS.open(updater) # None if QS did not open
                        self.QS = QS # used for checkbox event
                    except Exception as e:
                        print("reopen QS error: ", repr(e))
                    break
                else:
                    self.text_ctrl_messages.AppendText("QMP was not able to copy CSV files to Quadtick\n")
                    confirm = wx.MessageDialog( self, "QMP was not able to copy CSV files to Quadtick\nTry Again?", caption="Error copying CSV files!", style=wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION | wx.STAY_ON_TOP )
                    result = confirm.ShowModal()
                    #self.text_ctrl_messages.AppendText(repr(result) + "\n")
                    if result != wx.ID_YES:
                        break
            #shutil.rmtree(tmp_folder_path, True)
            self.build_number_text.SetValue(str(quadstick_drive_serial_number(self)))
            self.update_online_game_files_list_items()
            self.update_quadstick_flash_files_items()
            self.updateControls()
            telemetry_log('firmwareupdate&firmware=' + self.build_number_text.GetValue())
            self.SetCursor(wx.Cursor(wx.CURSOR_DEFAULT))
        event.Skip()
    def onMessagePaneEnter(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        global EnableTouchPad
        #print "Event handler 'onMessagePaneEnter'"
        #print "Just Entered: ", self.voice_transcript.GetValue()
        line_count = self.voice_transcript.GetNumberOfLines()
        buffer = self.voice_transcript.GetLineText(self.voice_transcript.GetNumberOfLines()-1)
                
        #print "last line: ", buffer
        if buffer.find('TITLE:') >= 0:
            # set a new title to control Vocola file active section
            self.SetTitle(_("QuadStick " + self.console_type + " " + buffer[6:]))
            self.InitializeWordList(buffer[6:])
            buffer = "\r" # just clear buffer
        elif buffer.find('TOUCHPAD:') >=0:
            EnableTouchPad =  buffer.find('ON') > 0
        elif buffer.find('TP:X') == 0:
            EnableTouchPad =  not EnableTouchPad
        elif buffer.find('TP:1') == 0:
            EnableTouchPad =  True
        elif buffer.find('TP:0') == 0:
            EnableTouchPad =  False
        elif buffer.find('RESTART DRAGON NATURALLY SPEAKING!!!') == 0:
            RestartDragon()
        elif buffer.find('IR_CALIBRATE') == 0:
            if TIR:
                TIR.center()
        elif buffer.find('IR_RUN') == 0:
            if TIR:
                TIR.track()
        elif buffer.find('IR_STOP') == 0:
            if TIR:
                TIR.pause()
        elif SERIAL_PORT_SOCKET:
            if buffer.find('!') == 0: #line begins with !
                SERIAL_PORT_SOCKET.sendto(('\r'+buffer[1:]).encode(), (UDP_IP, UDP_PORT))

        if self.voice_transcript.GetLastPosition() > 1000:
            self.voice_transcript.Remove(0, 100)
        self.voice_transcript.SetInsertionPointEnd()
        event.Skip()
    def InitializeWordList(self, title):
        active_words = "Active Voice Commands\n\n"
        game_words = VCH_file_words.get(title.strip(),list())
        if game_words:
            active_words = active_words + ("\n".join(game_words)) + "\n\n"
        common_words = VCH_file_words.get('_common_phrases',list())
        if common_words:
            active_words = active_words + ("\n".join(common_words)) + "\n\n"        
        active_words = active_words + CommonVoiceCommands
        self.word_list.SetValue(active_words)
    def CloseEvent(self, event):
        global US1, US2, QS, VG
        print("CloseEvent")
        position = self.GetRect()
        x,y,w,h = position.Get()
        if x>0 and y>0 and w>0 and h>0:
            settings['WINDOW_POSITION'] = (x,y,w,h)
        else:
            try:
                del settings['WINDOW_POSITION']
            except:
                pass

        settings['minimize_to_tray'] = self.checkbox_minimize_to_tray.GetValue()
        settings['start_mimimized'] = self.checkbox_start_minimized.GetValue()

        save_repr_file(settings)
        try:
            #if TIR:
                #TIR.close()
                #TIR = None
                #print 'TrackIR listener stopped'
            if US1:
                US1.close()
                US1 = None
                print('UltraStick device 1 closed')
            if US2:
                US2.close()
                US2 = None
                print('UltraStick device 2 closed')
            if VG:
                VG.close()
                VG = None
                self.VG = None
                print("Virtual game emulator closed")
            if QS:
                QS.close()
                QS = None
                print('QuadStick device closed')
            if self.microterm:
                self.microterm.close()
                self.microterm = None
                print('Serial port closed')
        except Exception as e:
            print("Exception during close event: ", repr(e))
        try:
            self.tbIcon.RemoveIcon()
            self.tbIcon.Destroy()
        except:
            pass
        self.Destroy()
    def onMinimize(self, event):
        """
        When minimizing, hide the frame so it "minimizes to tray"
        """
        if self.IsIconized():
            if self.checkbox_minimize_to_tray.GetValue():
                self.Hide()
    def KeyDownEvent(self, event):
        # grab any ESCAPE character and use it to Press PS4 Touchpad
        global PressTouchPad
        value = event.GetKeyCode()
        print ('KeyDownEvent ', repr(event))
        # if value == 27: # escape
            # if cronusmax.PressTouchPad == 0:
                # print("press touchpad")
                # cronusmax.PressTouchPad = 1
                # self.CM.update(None)
            # return
        if value == 349: #"F10"
            self.StartMouseCaptureEvent(event)
        if value == 340: #"F1"
            self.TechsupportReport()
        if value == 341: #"F2"
            self.QS.check_status()
        if value == 342: #"F3"
            self.VG.DEBUG = not self.VG.DEBUG
        if value == 343: #"F4"
            self.QS.close()   # reopen QS

        #print "keycode: ", int(value)
        event.Skip()
    def KeyDownEvent2(self, event):
        # grab any ESCAPE character and use it to Press PS4 Touchpad
        # if voice transcript is not the focus, make it so
        global PressTouchPad
        print ('KeyDownEvent2 ', repr(event))
        if self.FindFocus() != self.voice_transcript:
            print ("voice_transcript does not have focus\n")
            value = event.GetKeyCode()
            if value == 27: # escape
                self.voice_transcript.SetFocus()
                # if cronusmax.PressTouchPad == 0:
                    # print("press touchpad and change focus")
                    # cronusmax.PressTouchPad = 1
                    # self.CM.update(None)
                    # value = event.GetKeyCode()
        value = event.GetKeyCode()
        if value == 349: #"F10"
            self.StartMouseCaptureEvent(event)
        if value == 340: #"F1"
            self.TechsupportReport()
        if value == 341: #"F2"
            self.QS.check_status()
        if value == 342: #"F3"
            self.VG.DEBUG = not self.VG.DEBUG
        #print "keycode: ", int(value)
        event.Skip()
    def KeyUpEvent(self, event):
        global PressTouchPad
        #print 'KeyUpEvent ', repr(event)
        # if cronusmax.PressTouchPad > 0:
            # print("release touchpad")
            # cronusmax.PressTouchPad = 0
            # self.CM.update(None)
        event.Skip()
        
    def TIR_DeadZoneEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'TIR_DeadZoneEvent'")
        settings['TIR_DeadZone'] = self.TIR_DeadZone.GetValue()
        event.Skip()
    def EnableUsbCommEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'EnableUsbCommEvent'")
        preferences['enable_usb_comm'] = '1' if self.checkbox_enable_usb_comm.GetValue() else '0'
        event.Skip()
    def LoadAndRunEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'LoadAndRunEvent'")
        selection = self.list_box_csv_files.GetFirstSelected()
        if selection >= 0:
            filename = self.list_box_csv_files.GetItem(selection, 1).GetText()
            print(repr(filename))
            if filename == 'prefs.csv': 
                self.text_ctrl_messages.AppendText("Sorry, that is not a game file. \n")
                event.Skip()
                return
        self.text_ctrl_messages.AppendText("Load and Run " + filename + " in QuadStick\n")
        aString = "\rload," + filename + "\r"
        # make use of existing vocola listening thread to handle this
        sock = socket.socket(socket.AF_INET, # Internet
                             socket.SOCK_DGRAM) # UDP
        sock.sendto(aString.encode(), (UDP_IP, UDP_PORT))
        event.Skip()

    def OnEditSpreadsheet(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'EditGameFileEvent'")
        item = self._last_game_list_selected.GetFirstSelected()
        #item = self.online_game_files_list.GetFirstSelected()
        print("item ", repr(item))
        id = None
        if item >= 0:
            print("selected item: ", item)
            if self._last_game_list_selected == self.user_game_files_list:
                # handle user list edit
                print("Edit user game")
                gps = settings.get("user_game_profiles", [])
            elif self._last_game_list_selected == self.online_game_files_list: # factory game
                print("Edit factory game")
                gps = self._game_profiles
            elif self._last_game_list_selected == self.list_box_csv_files:
                print("Edit csv file in quadstick flash")
                gps = self._csv_files
            gp = gps[item]
            id = gp["id"]
            game_name = gp["name"]
            path = urllib.parse.quote(game_name)

                # (game_name, folder, path, name, url) = self._game_profiles[item]
                # if path:
                    # text = read_S3_file(path, url)
                    # if text.find("/spreadsheets/d/") > 0: #if has a spreadsheet key
                        # text = text.split("/spreadsheets/d/")[1]
                        # id = text.split("/")[0]
                    # else:
                        # self.text_ctrl_messages.AppendText("*** Spreadsheet key not found ***\n")
        if id:
            url = "https://docs.google.com/spreadsheets/d/" + id + "/"
            import webbrowser
            webbrowser.open(url, new=2)
            self.text_ctrl_messages.AppendText("Opened: " + game_name + "\n")
            telemetry_log('edit&ss=' + id + '&name=' + path)
                        
        event.Skip()
    def GameListSelected(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        # save last selected game for Edit or Download button action
        self._last_game_list_selected = event.GetEventObject()
        print("Event handler 'GameListSelected'")
        # deselect any items in the other list
        if self._last_game_list_selected == self.online_game_files_list:
            self._deselect_list(self.user_game_files_list)
            self._deselect_list(self.list_box_csv_files)
            self.button_delete_csv.Disable()
            self.button_remove_user_game.Disable()
            self.button_load_and_run.Disable()
            self.button_download_csv.Enable()

        elif self._last_game_list_selected == self.list_box_csv_files:
            self._deselect_list(self.user_game_files_list)
            self._deselect_list(self.online_game_files_list)
            self.button_remove_user_game.Disable()
            self.button_download_csv.Enable()

        elif self._last_game_list_selected == self.user_game_files_list:
            self._deselect_list(self.online_game_files_list)
            self._deselect_list(self.list_box_csv_files)
            self.button_delete_csv.Disable()
            self.button_remove_user_game.Enable()
            self.button_load_and_run.Disable()
            self.button_download_csv.Enable()
        event.Skip()
    def _deselect_list(self, list):
        item = list.GetFirstSelected()
        while item >= 0:
            list.SetItemState(item, 0, wx.LIST_STATE_SELECTED) 
            item = list.GetNextSelected(item)
    def BeginDragGame(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        """ Begin a Drag Operation """
        print("Event handler 'BeginDragGame'")
        # get ID from list widget selection index
        index = event.GetIndex()
        if index >= 0:
            gps = settings.get("user_game_profiles", [])
            try:
                gp = gps[index]
                id = gp['id']
                # Create a Text Data Object, which holds the text that is to be dragged
                tdo = wx.PyTextDataObject(id)
                # Create a Drop Source Object, which enables the Drag operation
                tds = wx.DropSource(event.GetEventObject())
                # Associate the Data to be dragged with the Drop Source Object
                tds.SetData(tdo)
                # Initiate the Drag Operation
                tds.DoDragDrop(True)
            except Exception as e:
                print(repr(e))
        event.Skip()
    def BeginDragFactoryGame(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        """ Begin a Drag Operation """
        print("Event handler 'BeginDragFactoryGame'")
        # get ID from list widget selection index
        index = event.GetIndex()
        if index >= 0:
            gps = self._game_profiles
            try:
                gp = gps[index]
                id = gp['id']
                # Create a Text Data Object, which holds the text that is to be dragged
                tdo = wx.PyTextDataObject(id)
                # Create a Drop Source Object, which enables the Drag operation
                tds = wx.DropSource(event.GetEventObject())
                # Associate the Data to be dragged with the Drop Source Object
                tds.SetData(tdo)
                # Initiate the Drag Operation
                tds.DoDragDrop(True)
            except Exception as e:
                print(repr(e))
        event.Skip()
    def ContextMenuUserGames(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'ContextMenuUserGames' not implemented!")
        event.Skip()
    def UserGamesAdd(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        self._last_game_list_selected = self.user_game_files_list
        print("Event handler 'UserGamesAdd'")
        # open the prompt for the user's url
        dialog = UserGoogleDriveFolder(self, wx.ID_ANY, "")
        dialog.google_drive_url.SetValue("")
        dialog.ShowModal()
        result = dialog.result
        dialog.Destroy()
        url = result
        if not result:
            event.Skip()
            return False # bad read
        self.user_game_files_dropped(None, None, url)
        event.Skip()
    def UserGamesRemove(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        if self._last_game_list_selected == self.user_game_files_list:
            item = self.user_game_files_list.GetFirstSelected()
            #item = self.online_game_files_list.GetFirstSelected()
            print("item ", repr(item))
            items = list()
            while item >= 0:
                print("selected item: ", item)
                items.append(item)
                item = self.user_game_files_list.GetNextSelected(item)
            items.reverse()
            gps = settings.get("user_game_profiles", [])
            for item in items:
                try:
                    del gps[item]
                    self.update_user_game_files_list_items()
                except:
                    pass
                #settings["user_game_profiles"] = gps
        print("Event handler 'UserGamesRemove'")
        event.Skip()
    def list_box_csv_files_selected(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'list_box_csv_files_selected'")
        d = find_quadstick_drive()        
        usb_comm = int(preferences.get('enable_usb_comm', defaults['enable_usb_comm'])) > 0
        if (d and usb_comm) or ( preferences.get('bluetooth_device_mode') == 'ssp' ) or (self.microterm and self.microterm.serial): 
            self.button_load_and_run.Enable()
        self.button_delete_csv.Enable()
        self.GameListSelected(event) #event.Skip()
        
    def MouseCaptureModeEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'MouseCaptureModeEvent'")
        settings['mouse_capture_mode'] = self.capture_mode.GetStringSelection()
        event.Skip()
    def MouseCenterXEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'MouseCenterXEvent'")
        settings['mouse_center_x'] = self.center_x.GetValue()
        event.Skip()
    def MouseCenterYEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'MouseCenterYEvent'")
        settings['mouse_center_y'] = self.center_y.GetValue()
        event.Skip()
    def MouseWidthEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'MouseWidthEvent'")
        settings['mouse_width'] = self.position_width.GetValue()
        event.Skip()
    def MouseHeightEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'MouseHeightEvent'")
        settings['mouse_height'] = self.position_height.GetValue()
        event.Skip()
    def MouseGainXEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'MouseGainXEvent'")
        settings['mouse_gain_x'] = self.gain_x.GetValue()
        event.Skip()
    def MouseGainYEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'MouseGainYEvent'")
        settings['mouse_gain_x'] = self.gain_y.GetValue()
        event.Skip()
    def StartMouseCaptureEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'StartMouseCaptureEvent'")
        dialog = MouseCapture(self, wx.ID_ANY, "")
        dialog.ShowModal()
        result = dialog.result
        dialog.Destroy()
        event.Skip()
    def start_microterm(self):
        t = threading.Thread(target=self._start_microterm)
        t.daemon = True
        t.start()
    def _start_microterm(self):
        global MT
        #self.text_ctrl_messages.AppendText("Start serial connection search.\n")
        for i in range(4): # try up to four times to find com port
            mt = microterm(self)
            if mt:
                self.microterm = mt
                MT = mt
                print("Microterm started")
                if find_quadstick_drive() is None: 
                    print("Load preference file over microterm")
                    load_preferences_file(self)
                    wx.CallAfter(self.updateControls)
                    wx.CallAfter(self.text_ctrl_messages.AppendText, "Loaded preferences OK\n")
                return
        #self.text_ctrl_messages.AppendText("No serial connection to the QuadStick was found\n")
    def TechsupportReport(self):
        import tempfile
        global logfile
        global tmp_log_path
        dlg = wx.MessageDialog(self, "Send debug log to Quadstick?\n", "Tech support report", wx.YES_NO | wx.ICON_QUESTION)
        if dlg.ShowModal() == wx.ID_YES:
            self.text_ctrl_messages.AppendText("Sending Debug report.  Please wait...\r\n")
            try:
                telemetry_log('systeminfo&' + urllib.parse.quote_plus(subprocess.check_output("systeminfo")))
            except Exception as e:
                print("systeminfo error", repr(e))
            sleep(3.0)
            try:
                print("tmp_log_path", tmp_log_path)
                sys.stdout = original_stdout
                sys.stderr = original_stderr
                try:
                    logfile.close()
                except:
                    pass
                with open(tmp_log_path, "r") as tmp_file:
                    logtext = tmp_file.read()
                    telemetry_log('message_log&' + urllib.parse.quote_plus(logtext))
            except Exception as e:
                self.text_ctrl_messages.AppendText(repr(e))
            sleep(3.0)
            self.text_ctrl_messages.AppendText("Debug report sent.  Restart QMP.\r\n")
        dlg.Destroy()

        pass
    def PrintFileListEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'PrintFileListEvent'")
        d = find_quadstick_drive()
        answer = [FILE_LIST_HTML_HEADER]
        files = list_quadstick_csv_files(self) 
        index = 1
        for f in files:
            if f[0] == 'prefs.csv': continue
            answer.append(FILE_LIST_COL_0)
            answer.append(LED_PATTERN.get(index, ""))
            answer.append(FILE_LIST_COL_1)
            answer.append(str(index))
            answer.append(FILE_LIST_COL_2)
            answer.append(str(f[0]))
            answer.append(FILE_LIST_COL_3)
            answer.append(str(f[2])) #xlsx2csv.get_name_from_csv(f,d))
            answer.append(FILE_LIST_COL_4)
            index += 1
        answer.append(FILE_LIST_HTML_FOOTER)
        answer = "".join(answer)
        tmp_file_path = xlsx2csv.write_temporary_file("file_list.html", answer)
        xlsx2csv.write_temporary_file("red.svg", RED_DOT, False)
        xlsx2csv.write_temporary_file("blue.svg", BLUE_DOT, False)
        xlsx2csv.write_temporary_file("purple.svg", PURPLE_DOT, False)
        xlsx2csv.write_temporary_file("grey.svg", GREY_DOT, False)
        import webbrowser
        url = """file:///""" + tmp_file_path
        webbrowser.open(url, new=2)
        event.Skip()
    def PS4BootModeEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'PS4BootModeEvent'")
        if self.checkbox_ps4_boot_mode.GetValue():
            print("ps4 boot mode enabled")
            preferences['enable_DS3_emulation'] = '4'
            # force off usb commands and cronusmax
            #preferences['enable_usb_comm'] = '0'
            #self.checkbox_enable_usb_comm.SetValue(False)
            #settings['enable_CM'] = 0
            #`self.checkbox_controller_max.SetValue(False)
        else:
            print("ps4 boot mode disabled")
            preferences['enable_DS3_emulation'] = '0'
        event.Skip()
    def BT_ConnectionChoiceEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'BT_ConnectionChoiceEvent'")
        mode = self.choice_BT_connection_mode.GetStringSelection()
        if (mode == 'auto'):
            self.text_ctrl_BTA_remote_address.Enable()
            self.BTA_label.Enable()
            self.text_ctrl_BTA_remote_address.Show()
            self.BTA_label.Show()
        else:
            self.text_ctrl_BTA_remote_address.Disable()
            self.BTA_label.Disable()
            self.text_ctrl_BTA_remote_address.Hide()
            self.BTA_label.Hide()

        event.Skip()
    def EnableSerialPortEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'EnableSerialPortEvent'")
        flag = event.GetEventObject().GetValue()
        settings['enable_serial_port'] = flag
        save_repr_file(settings)
        event.Skip()
    def T2PS4Event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'T2PS4Event'")
        if self.checkbox_Titan2.GetValue():
            print("T2 enabled")
            preferences['titan_two'] = '1'
        else:
            print("T2 disabled")
            preferences['titan_two'] = '0'
        event.Skip()
    def vgXBoxEvent(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'vgXBoxEvent'")
        flag = event.GetEventObject().GetValue()
        settings['enable_VGX'] = flag
        if flag:  # turning on XB360 emulator
            self.text_ctrl_messages.AppendText("Virtual XBox controller enabled\r\n")
            if self.VG: # if vigembus present'
                settings['enable_VG4'] = False  # force off the other emulation mode
                self.checkbox_enable_vg_DS4.SetValue(False)
                self.VG.close() # close any previous emulator.  Noop if not open
                self.VG.open()
                self.VG.start()
                #self.console_type = VG.console_type

        else:
            self.text_ctrl_messages.AppendText("Virtual XBox emulator disabled\r\n")
            if self.VG:
                self.VG.close()
        save_repr_file(settings)
        if self.QS: 
            self.QS.enable(flag)
        else:
            self.text_ctrl_messages.AppendText("Restart program with QuadStick connected to activate Virtual gamepad emulator\r\n")
        event.Skip()
        
    def vgDS4Event(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'vgDS4Event'")
        flag = event.GetEventObject().GetValue()
        settings['enable_VG4'] = flag
        if flag:
            self.text_ctrl_messages.AppendText("Virtual DS4 controller enabled\r\n")
            if self.VG: # if vigembus present
                settings['enable_VGX'] = False
                self.checkbox_enable_vg_X360.SetValue(False)
                self.VG.close() # close any previous emulator.  Noop if not open
                self.VG.open()
                self.VG.start()
                #self.console_type = VG.console_type

        else:
            self.text_ctrl_messages.AppendText("Virtual DS4 emulator disabled\r\n")
            if self.VG:
                self.VG.close()
        save_repr_file(settings)
        if self.QS: 
            self.QS.enable(flag)
        else:
            self.text_ctrl_messages.AppendText("Restart program with QuadStick connected to activate Virtual gamepad emulator\r\n")
        event.Skip()
        
    def set_properties(self, dummy):
        print ('SET PROPERTIES *******************************************************************************')
        ib = wx.IconBundle()
        ib.AddIcon(resource_path("quadstickx.ico"), wx.BITMAP_TYPE_ANY)
        self.SetIcons(ib)
        # # Content of this block not found. Did you rename this class?
        # pass
        # self.TIR_LeftUp.SetBarColor(wx.Colour(0,255,0))
        # self.TIR_LeftLeft.SetBarColor(wx.Colour(0,0,0))
        # self.TIR_LeftRight.SetBarColor(wx.Colour(0,255,0))
        # self.TIR_LeftDown.SetBarColor(wx.Colour(0,0,0))
        # self.TIR_RightUp.SetBarColor(wx.Colour(0,255,0))
        # self.TIR_RightLeft.SetBarColor(wx.Colour(0,0,0))
        # self.TIR_RightRight.SetBarColor(wx.Colour(0,255,0))
        # self.TIR_RightDown.SetBarColor(wx.Colour(0,0,0))
        # self.grid_1.SetDefaultCellFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, True))
        # self.grid_1.AutoSizeColumns(True)


    def ToggleHIDHideStatus(self, event):  # wxGlade: QuadStickPreferences.<event_handler>
        print("Event handler 'ToggleHIDHideStatus' ")
        flag = event.GetEventObject().GetValue()
        try:
            if flag:
                H.hide_quadstick(QS)
            else:
                H.unhide_quadstick(QS)
        except:
            pass
        event.Skip()
        
    def on_USB_status_timer(self):  # periodically checks the USB status of the Quadstick
        print ("Check USB status")
        try:
            if QS._qs is None:
                QS.open()
                if VG:
                    VG.reset()
            else:
                if not QS._qs.is_plugged():
                    QS.close()
                    self.text_ctrl_messages.AppendText("Quadstick disconnected\r\n")
        except Exception as e:
            print ('USB status exception: ', repr(e))
            print (traceback.format_exc())
            pass
        wx.CallLater(3000, self.on_USB_status_timer)

# end of class QuadStickPreferences


def main():
    import tempfile
    global QMP
    global SERIAL_PORT_SOCKET
    global VG
    global QS
    global US1
    global US2
    global TIR
    global MOUSE
    global logfile
    global tmp_log_path
    global H
    
    global MT
    MT = None

    # redirect stdout to file when running under pythonw, if you don't
    # eventually the program stops working with no indication as to why
    print(str(sys.executable))
    tmp_log_path = tempfile.gettempdir() + '\\quad_stick_log_file.txt'
    if sys.executable.find('python.exe') == -1:
        logfile = open(tmp_log_path, 'wt')
        sys.stdout = sys.stderr = logfile
        print(repr(logfile))
    print(str(sys.executable))
    print("QMP starting. Version: ", VERSION)

    try:
        qmp_url = None
        if len(sys.argv) > 1:
            if (sys.argv[1].find(".qmp")) > 0:
                qmp_filename = sys.argv[1]
                print("qmp_filename is ", qmp_filename)
                # read the first line of the file
                with open(qmp_filename, 'rb') as qmp_file:
                    qmp_url = qmp_file.readline() # bytes object
    except Exception as e:
        print("qmp_filename exception: ", repr(e))
    # load_preferences_file()
    read_repr_file() # load global settings

    # initialize default locale if not exists in settings
    if not settings.get('current_locale'):
        settings['current_locale'] = "en"

    # Set up Locale
    current_locale = settings.get('current_locale')
    locale = gettext.translation('locale', resource_path('./locales'), [current_locale])
    locale.install()
    _ = locale.gettext

    app = wx.App(0)
    wx.InitAllImageHandlers()
    QMP = QuadStickPreferences(None, wx.ID_ANY, "")
    QMP.console_type = ""
    app.SetTopWindow(QMP)

    # try:
        # generate_includes_vch_file()
    # except Exception as e:
        # print repr(e) 
    
    # create the Microterm singleton used for voice and other commands
    QMP.microterm = None
    # set up HIDEHide
 
    print("Load initial values")
    if QMP.load_initial_values():
        print("Initial values loaded")
        # restore the window position
        wp = settings.get('WINDOW_POSITION', None)
        print("\n\nset window position: ", wp)
        if wp: # if previous window position stored
            if len(wp) == 4: # position and extent saved (new version)
                x,y,w,h = wp
                if x > 0 and x < wx.DisplaySize()[0] and y > 0 and y < wx.DisplaySize()[1] and w > 700 and h > 400: 
                    QMP.SetRect(wp)
        # open up a listening socket to receive text from Vocola
        SERIAL_PORT_SOCKET = socket.socket(socket.AF_INET, # Internet
                             socket.SOCK_DGRAM) # UDP
        Vocola = None
        try:

            SERIAL_PORT_SOCKET.bind((UDP_IP, UDP_PORT))
            print("start a listening thread to receive and display messages from vocola")
            Vocola = VocolaListenerThread(QMP, SERIAL_PORT_SOCKET, QS)
            Vocola.start()

            print("Show Window")
            # https://src.chromium.org/viewvc/chrome/trunk/src/ui/views/win/fullscreen_handler.cc?revision=HEAD&view=markup
            # http://stackoverflow.com/questions/2382464/win32-full-screen-and-hiding-taskbar#5299718
            
            #QMP.SetWindowStyle(wx.STAY_ON_TOP) # go borderless
            #QMP.SetExtraStyle(QMP.GetExtraStyle() & ~(win32con.WS_EX_DLGMODALFRAME |
            #    win32con.WS_EX_WINDOWEDGE | win32con.WS_EX_CLIENTEDGE | win32con.WS_EX_STATICEDGE))
            #QMP.SetRect((0,0,wx.DisplaySize()[0], wx.DisplaySize()[1]))
            QMP.Show()
            VG = None
            QMP.VG = None
            try:
                VG = VirtualGamepadEmulator(QMP)  # Opens the DLL, regardless of the presence of a VG
                VG.DEBUG = DEBUG
                QMP.VG = VG
                settings['ViGEmBus'] = 'VIGEM_ERROR_NONE'
                try:  # set up HIDHide to allow QMP to see the Quadstick
                    H = HIDHide.HIDHide(QMP)
                    H.check_for_quadstick_registration()
                except Exception as e:
                    print ('HIDHide init error: ' + repr(e))
                print('ViGEmBus OK')
            except Exception as e:
                print(repr(e))
                settings['ViGEmBus'] = str(e)
                QMP.text_ctrl_messages.AppendText('ViGEmBus driver not present\r\n')
                QMP.checkbox_enable_vg_X360.Disable()
                QMP.checkbox_enable_vg_DS4.Disable()
            try:
                QS = QuadStickHID(QMP, VG)
                QS.enable(settings.get('enable_VGX', True) or settings.get('enable_VG4', True)) # if either emulation is enabled, enable the QS interface
                opened = QS.open() #VG.unbuffered_update) #update) # None if QS did not open
                if opened is None:
                    QMP.text_ctrl_messages.AppendText( 'QuadStick Game Controller is not connected to PC\r\n' )
                if VG and (QMP.checkbox_enable_vg_X360.GetValue() or QMP.checkbox_enable_vg_DS4.GetValue()):
                    VG.open() # if cronusmax preset
                    VG.start()
                        #QMP.console_type = "" #VG.console_type
                else:
                    QMP.text_ctrl_messages.AppendText('Virtual Gamepad disabled\r\n')
                print('Quadstick HID OK')
            except Exception as e:
                print(repr(e))
            try:  # initialize the checkbox on the Misc tab
                if H.is_installed():
                    QMP.checkbox__enable_HIDHide.SetValue(H.is_hidden(QS))
                else:
                    QMP.checkbox__enable_HIDHide.Disable()
            except Exception as e:
                print (repr(e))
                QMP.checkbox__enable_HIDHide.Disable()
            try:
                Vocola.qs = QS # vocola initialization was moved up for some forgetton reason but it needs a reference to the quadstick
            except Exception as e:
                print (repr(e))
            try:
                # now open ultrastick
                US1 = UltraStikHID(QMP)
                US1.enable(True)
                US2 = UltraStikHID(QMP)
                US2.enable(True)
                US1 = US1.open(QS, 0)  
                sleep(0.5)
                US2 = US2.open(QS, 1)
                # if ultrastik(s) present, US1 (US2) will be hold the interface object
                mouse_index = 0 # if only a mouse, then it is the first USB input
                if US1:
                    mouse_index = 1  # if one Ultrastik, then move the mouse to the second USB input
                    if US2:
                        mouse_index = 2 # currently there is no position 2, so this disables the mouse capture
                if mouse_index < 2:  # then route the mouse position to the quadstick
                    MOUSE = Mouse(QMP, wx, QS, mouse_index)
                #if not (US1 or US2):
                    #TIR = TrackIRThread(QMP, QS)
                    #TIR.start()
            except Exception as e:
                print("Exception during open UltraStik ", repr(e))

            QMP.QS = QS # used for checkbox event
            if qmp_url:
                wx.CallAfter(QMP.csv_files_dropped, None, None, qmp_url.decode())

            # restore the last active notebook tab
            wx.CallAfter(QMP.set_properties, None)  # older wxpython would call __set_properties at start up.  Now we do it manually
            wx.CallAfter(QMP.notebook.SetSelection, settings.get('last_page', 0))
            wx.CallAfter(QMP.ScanGoogleGameProfilesEvent, None)  # since games list is tab 0, needed this to pre-load games
            wx.CallAfter(QMP.start_microterm)
            wx.CallAfter(QMP.on_USB_status_timer)  # start monitoring the Quadstick HID status

            if settings.get('start_mimimized', False):  # minimize at start
                wx.CallAfter(QMP.Iconize, True )

            app.MainLoop()  # 

        except Exception as e:
            print("unable to open listening socket for vocola")
            print(repr(e))
            # other copy may be running.  tell it to come to front
            SERIAL_PORT_SOCKET.sendto(b"BRING TO FRONT", (UDP_IP, UDP_PORT))
            QMP.Close()
            if qmp_url: # command line parameter with a .qmp file
                # pass qmp_filename to other copy of QMP
                SERIAL_PORT_SOCKET.sendto(b"LOAD: " + qmp_url, (UDP_IP, UDP_PORT))

        # closing window.  Shut everything down.
        if Vocola:
            Vocola.kill()
        #print("main loop exiting")
        try:
            if TIR:
                TIR.close()
                TIR.StopTrackIRWindow()
                TIR = None
                print('TrackIR listener stopped')
            if US1:
                US1.close()
                US1 = None
                print('UltraStick device 1 closed')
            if US2:
                US2.close()
                US2 = None
                print('UltraStick device 2 closed')
            if QS:
                QS.close()
                QS = None
                print('QuadStick device closed')
            if VG:
                VG.close()
                VG = None
                self.VG = None
                print('ViGEmBus closed')
            if SERIAL_PORT_SOCKET:
                SERIAL_PORT_SOCKET.close()
                SERIAL_PORT_SOCKET = None
                #print("UDP Vocola command Listening socket closed")
            if MT:
                MT.close()
        except Exception as e:
            print(repr(e))
    else:
        QMP.Destroy()

## Start up code:

# print ('Number of arguments:', len(sys.argv), 'arguments.')
# print ('Argument List:', str(sys.argv))

# if '-minimize' in sys.argv:
    # print ('MINIMIZE AT START')
    # MINIMIZE = True
    
if '-debug' in sys.argv:
    DEBUG = True


if not sys.flags.interactive:  # since is non-interactive
    print('start up in normal mode')
    main()
    sys.exit()
else:
    print('start in interactive mode')
    t = threading.Thread(target=main)
    t.start()
#if __name__ == "__main__":
    #main()

